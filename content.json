{"pages":[],"posts":[{"title":"TIL_190401","text":"1일차(0401) - HTML/CSSHTML/CSS - What I learn… html의 기본 구조 시맨틱 마크업 박스 모델 XMLXML은 Extensible Markup Language의 약자이며, W3C에서 개발된 표준 권고안 마크업 언어이다. XML은 데이터를 저장하고 전달할 목적으로만 만들어졌습니다. HTML과 다르게 미리 정의되어 있는 구조가 아닌, 사용자가 직접 정의해서 사용할 수 있습니다. HTML 4.01 vs HTML 5.0WHATWGWeb Hypertext Application Technology Working Group의 약자로 인터넷이 보급화 되면서, 무분별한 웹 형식과 액티브 X같은 플러그인으로 인해 웹 페이지가 무거워 졌습니다. 그래서 W3C에서 제안한 표준안으로 만들어진 그룹이다. HTML 기본 구조3단 Structure < html > < head > < /head > < body > (content) < /body > < footer > < /footer > < /html > 4단 Structure < html > < head > < /head > < nav > < /nav > < body > (content) < /body > < footer > < /footer > < /html > 선형화 단계 (Linearization Step)논리적으로 HTML을 구성하기 위해 마크업은 규칙에 따라 콘텐츠를 설계하는 단계이다. 선형화 단계를 거치면 전체적은 웹 페이지에 구성을 보기 쉽게 정리할 수 있고, CSS 작업시 좀더 간결한 작업을 할 수 있다. 시맨틱 요소 (Semantic Element)&lt; header &gt;&lt;div id=”header”&gt; &lt;header class=&quot;header&quot;&gt; header는 html 문서에 첫 머리말로 사용이 가능하여 여러번 사용이 가능하다. 즉 section, body 안에 header을 사용하여 구분을 짓기 위해 사용이 가능하다. &lt; footer &gt;&lt;div id=&quot;footer&quot;&gt; &lt;footer class=&quot;footer&quot;&gt; Webpage의 Copyright이나 회사 주소 정보를 사용 할 수 있다.section에 꼬리말로 사용하고 html 내에서 다수 사용이 가능하다. &lt; section &gt;&lt;div id=&quot;section&quot; class=&quot;section&quot;&gt;&lt;/div&gt; &lt;section id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/section&gt; 콘텐츠를 grouping 할 때 사용. Section 안에 section을 사용 할 수 있어서 중첩 사용이 가능하다. &lt; nav &gt;&lt;div id=&quot;nav&quot; class=&quot;nav&quot;&gt;&lt;/div&gt; &lt;nav id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/nav&gt; Navigation의 줄임말. navigation 메뉴를 나타낸다. 주로 헤딩 부분에 사용하지만, body 내부에 navigation 섹션에도 사용이 가능하다. &lt; article &gt;&lt;div id=&quot;article&quot; class=&quot;article&quot;&gt;&lt;/div&gt; &lt;article id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/article&gt; 독립적인 글들을 나타낼 때 사용. 블로그 포스팅 표현 할 때 사용하지만, RSS feed로 배포할 가치가 있는 컨텐츠에 사용한다. &lt; aside &gt;&lt;div id=&quot;aside&quot; class=&quot;aside&quot;&gt;&lt;/div&gt; &lt;aside id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/aside&gt; 콘텐츠와 관계 있는 부가 정보들을 표시 할 때 사용한다. 주로 side-bar콘텐츠들을 담기 위해 사용하기도 한다. &lt; main &gt;&lt;div id=&quot;main&quot; class=&quot;main&quot;&gt;&lt;/div&gt; &lt;main id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/main&gt; 주로 웹 페이지를 구성하는 메인 콘텐츠를 담는 태그이다. body 태그를 사용하여 구분할 수 있다. HTML 네이밍- [selector] id스타일을 지정할 때 한 가지만 지정해서 사용한다. ( # selector)하나의 문서에 고유한 id 하나밖에 쓸 수 없다. class그룹으로 묶어서 스타일을 지정할 때 사용한다. ( . selector) | id / class는 숫자로 시작해서는 안된다.| - [Naming convention] 식별자의 명칭이 되는 문자열에 방식을 결정하기 위한 규칙. 가독성, 시인성, 효울성에 목적을 가진다. 프로젝트, 프로그래밍 언어, 개발도구에 따라 방식을 결정한다. - [Coding Conventions] 프로그래밍 스타일에 관한 가이드 라인 모음. - [표기법] 카멜 표기법 / “camelCase” 각 단어의 첫문자는 대문자로 표기. 단 맨 처음 단어는 소문자로 시작.(띄어쓰기 대신 대문자로 구문함) 파스칼 표기법 / “PascalCase” 모든 단어의 첫문자를 대문자로 시작. 스네이크 표기법 / “snake_case” 단어를 밑줄문자로 구분하는 표기법 Perl, PHP, Python, Ruby, Rust 언어는 주로 스네이크 표기법을 사용한다. 헝가리언 표기법 / “strHungarian” 접두어를 사용하는 표기법 접두어 예시 b / 불리언 (boolean) ch / 문자 (char) f / float sz / NULL로 끝나는 문자열 (string+zero) WAI-ARIA정의Web Accessibility Initiative-Accessible Rich Internet Applications.WAI-ARIA는 접근성 및 상호 운용성을 향상시키기 위해 마크업에 역할 (Role), 속성 (Property), 상태 (State) 추가하여 스크린리더 및 음성지원 보조기기 사용을 용이하게 해준다. CSS - Box model박스 앨리먼트의 hight와 width로 사각형 박스 모양을 가지고 있다. 박스 모델은 마진(margin), 패딩(padding), 보더(border)로 구성되어 있다. normal flow일반적인 상황에서 각각의 요소들이 배치되는 순서를 뜻하는 말로서 기본 페이지 레이아웃에서 블록요소들은 기본적으로 상하 배치된다. flexfloatclearPseudo-Element(가상요소)::before, ::after, :hover","link":"/2019/04/01/TIL-190401/"},{"title":"Algorithm study_01","text":"title: 내용","link":"/2019/04/22/Algorithm-study-01/"},{"title":"TIL-190402","text":"2일차(0402) - HTML/CSSHTML/CSS - What I learn… CSS 레이아웃 선택자 레벨(점수) Table Position 브라우저 접두사 CSS 기초 상속의 이해 겹침의 개념 우선순위 레이아웃 position float display DOM Tree란? 선택자 파워 element &lt; class &lt; id &lt; inline-style Color Font font-size, font-weight, font-variant, line-height(특징 알기), font-family 브라우저별 지원 형식이 다름 rem, em, px 차이 알아보기 Table Position relative, absolute, fixed, sticky 각각의 특징 알기 브라우저 접두사 -webkit, -ms, -o, -moz","link":"/2019/04/02/TIL-190402/"},{"title":"TIL-190404","text":"3일차(0404) - HTML/CSSHTML/CSS - What I learn… CSSs CSS 레이아웃 선택자 레벨(점수) Table Position 브라우저 접두사 nav 한 페이지에 2~3개 정도가 적당 메인메뉴임을 알 수 있도록 으로 제목 넣어줄 것(section, article 동일) gradient background 속성 중 하나 linear-gradient() text-shadow white-space nowrap background-position animation - @keyframe","link":"/2019/04/04/TIL-190404/"},{"title":"TIL-190403-git blog 시작하기","text":"Hexo git blog 시작하기Node 설치Hexo를 사용하려면 Node 설치가 필요하다. 여기 를 통해 다운로드가 가능하다. Hexo 설치Command를 통해 해당 디렉토리에 명령어를 통해 설치하기 $ npm install hexo-cli -g 만약 설치를 하지 못한다는 에러 메세지가 출력 된다면 앞에 “sudo”를 붙여 보자. Hexo 초기 설정$ Hexo init (folder name) $ cd (folder name) $ npm install Blog 파일로 접속Hero new post “제목“Hero generateHero serverHero deploy 원하는 폴더에서 Hexo init [blog]Npm installHexo new post “#”","link":"/2019/04/03/TIL-190403-git-blog-시작하기/"},{"title":"TIL-190405","text":"4일차(0405) - HTML/CSSHTML/CSS - What I learn… # form fields legend label (input 요소에 for 속성으로 연결) a tag(title, target, a 태그의 중요성) text-indent letter-spacing clearfix(모듈) .clearfix::after {content: “”; display: block; clear: both;}","link":"/2019/04/05/TIL-190405/"},{"title":"TIL-190406-CSS-reset","text":"css reset study html basic css a “*“ ::befer / ::after-","link":"/2019/04/06/TIL-190406-CSS-reset/"},{"title":"TIL-190408","text":"5일차(0408) - HTML/CSSHTML/CSS - What I learn… # dl, dt, dd display: flex 크로스브라우징의 중요성 HTML5 Shiv - WEBDIR :: HTML5 Shiv - HTML5 요소 크로스브라우징","link":"/2019/04/08/TIL-190408/"},{"title":"TIL-190409","text":"6일차(0409) - HTML/CSSHTML/CSS - What I learn… # 날짜 정의 datetime 속성 - 필수 속성, 컴퓨터가 날짜를 확인 text-overflow overflow: hidden, white-space: nowrap 함께 써야 함 defer 속성 removeClass addClass e.keycode https://keycode.info/","link":"/2019/04/09/TIL-190409/"},{"title":"TIL-190411","text":"7일차(0411) - HTML/CSSHTML/CSS - What I learn… # article figure img alt , transition","link":"/2019/04/11/TIL-190411/"},{"title":"TIL-190412","text":"8일차(0412) - HTML/CSSHTML/CSS - What I learn… # ol q footer - article 내부에도 사용 가능 :hover 특징 counter() - counter(name, style) - name: 카운터 이름 - style: 기본값(생략)은 십진수(decimal), list-style-type과 동일한 값 * disc, circle, square, decimal, decimal-leading-zero, lower-roman, upper-roman, lower-greek, lower-latin, upper-latin, armenian, georgian, lower-alpha, upper-alpha, or none.","link":"/2019/04/12/TIL-190412/"},{"title":"TIL-190415","text":"9일차(0415) - HTML/CSSHTML/CSS - What I learn… # &lt;a href=&quot;mailto:code.ameba@gmail.com&quot;&gt;code.ameba@gmail.com&lt;/a&gt; 클릭 시 메일 작성 창 열림 `&lt;a href=“tel:01026840242”&gt;Tel-&gt; 모바일 환경에서 전화걸기 링크 &lt;header&gt;와 &lt;footer&gt;는 어디에나 들어갈 수 있다.(메인, 아티클, 섹션 등등) 푸터는 제목이 필요 없다 푸터의 주소에는 &lt;address&gt; 태그 사용 &lt;small&gt;: 주변 글자보다 작게 &lt;big&gt;: 주변 글자보다 크게 &amp;copy; 저작권 표시 반응형 웹 마크업이 심플해야 함 RWD(반응형) vs AWD(적응형) Flexible web design 다양한 패턴이 존재 desk top first vs mobile first 디바이스의 성능저하 고려해야 함 px 단위는 지양, %, vh 등의 비율 단위 지향 media queries @ : 앳사인 프린트용 CSS 별도 제작 및 연결 가능 모바일 세로 모드: 포트레이트 / 가로 모드: 랜드스케이프 sass(css 전처리기) 최근에는 scss를 더 많이 쓰는 편 img {max-width: 100%;height: auto;}` 모바일 환경에 맞는 아트디렉션 필요(단순히 사이즈를 줄이는 게 아닌 적절한 크롭) &lt;img src=&quot;#&quot; srcset=&quot;&quot;&gt; , &lt;picture&gt;, &lt;source&gt; 디바이스에 따른 조정 가능 @media screen device-pixel-ratio html shiv break point : 반응형에서 너비가 바뀌는 지점? padding 백분율은 가로 사이즈 기준.","link":"/2019/04/15/TIL-190415/"},{"title":"TIL-190416","text":"10일차(0416) - HTML/CSSHTML/CSS - What I learn… # picture, srcset 등으로 기기별 적절한 이미지 사이즈 적용 가능 반응형 배경이미지 https://webdir.tistory.com/81https://keycode.info/","link":"/2019/04/16/TIL-190416/"},{"title":"TIL-190417","text":"1일차 (0417) - 컴퓨터 공학Python - What I learn… # 파이선 언어란? 자료구조 / 알고리즘 Recursion 재귀Binary searchIndexSortStackHeap (segmentation) call by value call by reference 자바 스크립트는Single threaded =&gt; single call stackNon-blockingAsynchronousConcurrentCall stack / printSquare Function foo/ bar/ bez Blocking = 느리게 동작하는 코드 SetTimeout 32bit vs 64bit0, 1 = bit 차이점 와이어 갯수 메모리 주소값 정수 (integer)의 표현 일반적으로 1 바이트, 2바이트, 4바이트, 8바이트에 저장 부호 있는 정수(signed)와 부호 없는 정수(unsigned)로 나뉜다. 부호가 있는 경우 첫 bit가 부호를 나타냄(0: 양수, 1:음수)","link":"/2019/04/17/TIL-190417/"},{"title":"TIL-190418","text":"2일차 (0418) - 컴퓨터 공학Python - What I learn… # 프로그래머는 함수를 통해서 추상적인 함수 (function routine procedural, sub-routine)Procedural -programming = 절차 지향 객체(object) =&gt; OOP (object oriented programming) 객체지향 함수 (function)=&gt; function signature or interface함수 이름, 매개변수, 결과값(반환) =&gt; 내부 구현 (implantation) Function name = 함수가 어떤 일을 하는지 명확하게 나타낸다. 매개 변수, returna. 기능 명세 = 어떤 구조, 어떤 기술, 방식으로 설계할지 설계 (인터페이스 설계) Mantissa 52bit 는 정밀도를 말한다. 52 bit가 넘으면 에러로 정수로 떨어지지 않는다. Command =&gt; sys.float_info.mant_dig5353이 나오는 이유는 1.000000…앞에 1이 무조건 적으로 등장하기 때문에 1일 생략하여 mantissa에 52bit 에서 1bit를 초과하여 보여준다.","link":"/2019/04/18/TIL-190418/"},{"title":"TIL-190419","text":"3일차 (0419) - 컴퓨터 공학Python - What I learn… # Jupyter Jupyter notebookNew =&gt; python3 A=10A=이름 객체 (변수) variable10=값 객체 파이선에는 box 모델이 적용 되지 않음 모든 것이 객체 언어 추상화어셈블리어 = 하드웨어 의존적 = low levelC/ C++ = 메모리를 직접 할당, 해제 = unmanaged languageJava/ C# = 언어 자체가 메모리를 할당 해제 =&gt; 가비지 컬랙션Python/ javascript = 자료형에 자유로워짐 = high level language =&gt; 생산성이 좋다 부동 소수점 (floating point)고정 소수점 (fixed point) mutable object(변수 가능객체) 리스트 딕셔너리 집합immutable object(변경불가능객체) 정수, 상수 문자열 튜플","link":"/2019/04/19/TIL-190419/"},{"title":"TIL-190422","text":"4일차 (0422) - 컴퓨터 공학Python - What I learn… Call by object reference Call by reference Call by value 함수란? 어떤 입력에 대한 작업의 결과를 출력해 주는 것 함수를 사용하는 이유 반복되는 내용을 효율적으로 처리하기 위함 코드를 효율적으로 만들고 추가적으로 가독성도 올라가기 때문에 Name space소속을 나타내는 역할을 합니다. 즉 변수 이름이나 함수 이름과 같이 명칭을 사용하는 공간에 의미로 변수가 저장되어 있는 공간. [namespace]::[변수 혹은 함수] 그러나 네임스페이스는 소속 공간에 따라서 변수나 함수가 같은 이름임에도 다른 식으로 구분이 될 수 있다.ㄴ Stack frame이름 객체에 쌓이는 func frame메모리 공간 함수를 실행할 때 인자(parameter)를 어떻게 전달할 것인가?Call by value // stack frame이 분리되어져 있어 바깥으로 값을 뺄 수 없다Call by reference // stack frame 바깥으로 주소 값을 접근 및 수정이 가능하다. Immutable object =&gt; 함수 내부에서 값을 변경할 수 없다.Mutable object =&gt; 새로운 객체를 할당하는 것이 아니라면 함수 내부에서 값을 변경할 수 있다 Call by object reference함수 내부에서 튜플 값을 바꿔야 한다면tu = (1,2,3)def change_tu(tu, e1, e2, e3):tu=(e1,e2,e3)print(tu, ‘in change_tu’)return tu tu=change_tu(tu,4,5,6)print(tu) Nonlocalfirst function class 1. 함수를 인자(argument)로 전달def f(func, a, b): return func(a,b) def g(a,b): return a+b a=10 b=20f(g,a,b)output =30 2. 함수를 리턴(return) 값으로 전달def calc(kind): if kind==&quot;add&quot;: def add(a,b): return a+b return add elif kind==&quot;sub&quot;: def sub(a,b): return a-b return sub adder=calc(‘add’)adder (10,20)output = 30 3. 함수를 변수에 전달함수를 다른 함수의 전달 인자 로 사용하고, 함수에서 함수를 리턴 하거나 변수의 값으로 함수를 할당 가능 익명 함수(lambda)def func(a,b)return a+bf=lambda a, b: a+b //람다는 반드시 리턴한다. Javascript lambda =Function( ){} 함수 =&gt; lazy evaluation = 내가 필요할 때Map (func, iterable) // 사상 맵핑을 한다Filter (Reduce 리스트에 모든 값을 더한다. (reduce(lambda a, b: a+b, li)) List comprehension 삼항연산자A=10If a &gt; 7:String=“big”ElseString=”smaill” String “big” If a &gt; 7 else “smaill” // 참일 때 값 if 조건문 else 거짓일때 값 Dic.get[“e”] // 값이 없으면 noneDic [“e”] // 값이 없으면 에러Dic.update Closure함수 내부에 상태 정보를 저장해 두고 함수 결과가 이 내부의 상태 정보에 따라 출력 값이 달라진다.OOP를 쓸 수 없을떄 로컬 변수 함수가 실행 도중에 데이터를 저장하기 위해서 상태 정보: 특정한 데이터의 현제 상태문법: 계좌 클로져 함수:Def account(cus_name, balance):Def inner (money):Balance += moneyReturn cus_name, balanceReturn innerMy_acnt=account(‘greg. 5000)Your_acnt = account (“john”, 300) Linear search (선형 탐색)N -&gt; t(n) = n Binary search타겟을 찾았다면 인덱스 반환/ 찾지 못하면 noneN -&gt; t(n)= log^2n","link":"/2019/04/22/TIL-190422/"},{"title":"TIL-190425","text":"7일차 (0425) - 컴퓨터 공학Python - What I learn… Network TCP/IP 알고리즘 NetworkWAN PortWide Area Network - Local Network들을 통신하게 해주는 네트워크로 자신을 포함하지 않는 큰 범위에 네트워크. LAN portLocal Area Network 지역 네트워크로 이더넷 프로토콜을 사용하며 자신을 포함한 작은 네트워크 단위를 구성하는 네크워크망. IPPublic IP (공인 IP 주소)Globally Unique IP Private IP (사설 IP 주소)Private Network 상에 존재하며 NAT를 통해 인터넷에 연결이 가능하다. 하지만 인테닛 상에서 Private IP address로 연결이 불가능하다. IP routing table라우터가 경로를 찾을 때 사용하는 것으로, 패킷을 전송할 때 인터페이스의 데이터 링크 프레임 안에 IP 패킷을 캡슐화된 네트워크에 대한 정보를 포함하고 있다. Applicationhttp =메세지 기반에 “문자열”https = SSL / TLS을 포함한 보안이 개선된 웹 통신 방식FTPSMTPDNS = domain name service사람이 읽기 쉽다DNS를 =&gt; IP로 바꾼다 Translate (전송) / port =&gt; 특정process에 저장 Internet / IP (ip routing) – ip address Network Interface / ethernet (mac address) Port (Translate section)socket에 부여된 주소 숫자로서 특정 프로세스로 데이터를 전달할 수 있다.(0~2^16-1 정수)Socket = listening socket / data socketClient 프로세스 TCP (Transmission Control Protocol) 연결 지향형 Protocol로서 신뢰도가 높다. 패킷이 유실 되면 일정 시간 후 데이터를 재전송 해준다. 네크워크에 부담을 준다. UDP (User Datagram Protocol) 비 연결 지향형 Protocol로서 신뢰도가 낮다. 패킷 전송후 데이터 일부가 손실 되어도 재전송을 하지 않는다. 통신 속도가 빠르다. HTTPURL =&gt; http:// user : password @ host : port/urlpath ?query # bookmark port = 기본적으로 80을 쓰므로 일반적으로 생략이 가능 HTML/1.0 = 일시적 연결 TCP 연결 후 하나의 요청/ 응답 후 연결을 끊는다. HTML/1.1 = 지속적인 연결 (persistent connection) TCP 연결을 그대로 유지한다. Connection: close 헤더를 포함해 일시적 연결을 끊는다. 효율적인 캐싱과 프록싱 컨텐트 협상 Error 메세지200번대: 성공 메세지 300번대400번대: Client 에러 500번대: server 에러 Comparison Sort 종류Quick sortRandom pivot 피벗이 1이나 왔을때 n^2이된다. 이를 막기 위해 피벗과 가장 왼쪽에 값을 교체한다 Big O -&gt; averageInsertion sort 삽입 정열 Selection sort 선택 정열 Merge sort연산 리스트배열과 연결 리스트스택, 큐Tree순회전위중위후위레벨순서","link":"/2019/04/25/TIL-190425/"},{"title":"TIL-190424","text":"6일차 (0424) - 컴퓨터 공학Python - What I learn… OOP Network Hanoi tower Sorting Quick sort OOP객체지향프로그래밍 OOP(Object Oriented Programming) 캡슐화 (encapsulation)하나의 객체가 특정한 목적을 가지고 필요한 변수나 메소드를 하나로 묶는 것을 의미한다.주된 목적으로 정보을 은닉화(information hiding) 하기 때문에 함수를 관련성 있게 클래스에 구성해야한다. 추상화 (Abstraction)공통된 속성이나 기능을 묶어 이름을 붙이는 것으로 객체 지향적 관점에서 클래스를 정의한는 행동이 추상적이라고 할 수 있다. 다형성 (Polymorphism)부모 클래스에서 물려받은 가상의 함수를 자식 클래스 안에서 메서드가 오버라이딩(method overriding)+함수 오버로딩 (function overloading) 되어 사용되는 것을 말한다. 상속된 객체를 확장, 변경을 간능하게 해주며, 이를 통해 코드를 재사용 및 코드 간결화 되어 코드 관리가 편하다. 상속성 (Inheritance)상위 특징을 하위가 물려받는 것으로 상위 클래스에 근거하여 새롭게 클래스 행위를 정의 할 수 있게 도와준다. 즉 상위 클래스에 기능을 재사용할 수 있지만 새로운 기능을 추가할 수 있다. 디자이 패턴 (solid) S – single responsibility principle (단일 책임) O – open-closed principle (확장 폐쇠) L – liskov substitution principle (리스트프 치환) I – interface segregation principle (인터페이스 분리) D – Depending intorsion principle (의존 역전) Hanoi gamedef hanoi(n, _from, _by, _to):Base Caseㄴif n==1:print(f’{n}번쨰 쟁반을 {_from}에서 {_to}로 이동’)return hanoi(n-1, _from, _to, _by)print(f’{n}번쨰 쟁반을 {_from}에서 {_to}로 이동’)hanoi(n-1, _by, _from, _to) = hanoi(n, “A”, “B”, “C”) 버블 정렬데이터 갯 수If 4 = 3+2+1If 6 = 5+4+3+2+1  For,while 문을 사용하지 않고 1~n에 수를 모두 더하기[재귀함수 방식]def sumation(n):if n==1:return 1return sumation(n-1)+n [등차 수열 방식]def sumation(n):return n*(1+n)//2 절차지향 함수= 함수 시그니처 // 기능, 구현 객체지향 객체(object) /= (관련있는) +변수 상태정보(데이터) / 특성값 +함수 (메서드) 기능 ( input + 상태 정보(맴버) -&gt; output NetworkOSI 7 계층 응용 계층 (Application Layer) 표현 계층 (Presentation Layer) 세션 계층 (Session Layer) 전송 계층 (Transport Layer) 네트워크 계층 (Network Layer) 데이터 링크 계층 (Data link Layer) 물리 계층 (Physical Layer) LAN : local area Network WAN: Wide area Network Packet(패킷) = 보내는 사람, 받는 사람 Arp =Ip =&gt; mac Arp 스쿱핑 = 맥어드래스를 가로채어 정보를 빼오는 방식 Ip protocol Subnet mask: ICT: internet service providerHost ID에 할당된 비트를 잘라서 서브넷으로 Public IP : 세계적으로 Unique하다 Private IP DHCP : dynamic host configuration protocol Sorting단순 알고리즘Bubble sortInsertion sortSelection sort분할 알고리즘Quick sortMerge sortHeap sort 분할 정복 기법 (divide &amp; conquer)어려운 문제를 잘게 나누어서 하나씩 해결작은 Solution이 모여서 전체(큰)문제를 해결 Quick sortdef quick_sort(li, start, end): #base case #todoif start &gt;= end:return left = startright = endpivot = li [(left+right)//2] #left와 right가 교차하기 전까지while left &lt;= right: #list[left]가 피벗 보다 크면while li[left] &lt; pivot:left+=1 #list[right]가 피벗 보다 작으면while li[right] &gt; pivot:right-=1 if left &lt;= right:li[left], li[right]=li[right], li[left]left+=1right-=1 quick_sort(li, start, right)quick_sort(li, left, end) test codeimport randomwhile True:numdata=int(input(‘데이터 개수(종료:0):’))if not num_data:breakdata=[random.randint(1, 100) for in range(num_data)]print(data)quick_sort(data, 0, len(data)-1)print(data)","link":"/2019/04/24/TIL-190424/"},{"title":"TIL-190429","text":"1일차 (0429) - JavascriptJavascript - What I learn… 프론트엔트 개발자란? 자바스크립트란? 자바스크립트 개발 환경과 실행 방법 프론트엔드 개발자란?서버에서 데이터를 가져와서, 가공, 유저가 원하는 서비스를 만드는 사람. 즉 서버와 사용자 사이에 중간자 역할로 유저와 소통이 가능하고, 사용성을 구현한다. 애플리케이션을 사용하는 사람(유저)이 애플리케이션과 소통하기 위해 UI 을 사용하기 좋게 구현한다. UI상태 정보를 서버로 전송하기도 하고 서버의 데이터를 가져와서 UI에 표시하기도 한다. 디자이너, 백앤드 개발자와 협업 1. Computational Thinking프로그래밍은 원하는 명령을 컴퓨터에 전달하는 일종에 커뮤니케이션 방식이다. 즉 프로그래밍 언어는 프로그래머가 컴퓨터에게 명령을 전달하기 위한 언어의 집합이다. 프로그램은 간혹 문제 해결 능력을 요구하지만, 프로그래밍 차체는 알고리즘(문제 해결)과는 다른 영역이다. 다만 문제를 해결 방안을 고려할 때 필요한 것이 Computational Thinking이다 컴퓨터에 명령을 할 때는 논리적, 수학적 사고가 필요하게 되며 해결 과제를 작은 단위로 분해하고 패턴화해서 추출해야 더욱 효과적으로 프로그래밍을 할 수 있다. 2. 프로그래밍 언어컴퓨터가 사용하는 언어로 변환해주는 방식을 컴파일러 (Compiler) 혹은 인터프리터(Interpreter)라고 한다. 여기서 언어란 자신의 생각을 상대에게 전달하는 방법으로 언어 공동체 내에서 이해될 수 있는 말의 집합이다. 프로그래밍 언어는 Syntax(구문)와 Semantics(의미)의 조합으로 표현된다. 3. Syntax &amp; Semantics프로그램 언어를 배우기 위해선 일반적으로 문법을 우선적으로 공부를 해야한다. 문장에 정확한 이해와 문법에 맞는 문장을 구성하는 것은 물론 의미(Semantics)를 가지고 있어야 언어의 역할을 수행할 수 있다. 프로그래밍 언어는 문법이 아니라 문맥에 따라 의미를 파악하기 때문에 해결해야 하는 문제를 명확히 파악하고 요구사항이 실현(문제 해결)되어야 한다. 대부분의 프로그래밍 언어는 변수와 값, 키워드, 연산자, 표현식(Expression), 조건문과 반복문에 의한 흐름 제어(Control flow), 문(Statement), 문의 집합인 함수 그리고 객체, 배열 등의 자료구조와 같은 문법을 제공한다. 자바스크립트란?1. 자바스크립트의 탄생1995년 90%의 시장 점유율로 웹 브라우저 시장을 지배하던 넷스케이프 커뮤니케이션즈(Netscape Communications)는 동적인 HTML 구현하기 위해 새로운 프로그래밍 언어를 도입하기로 결정했다. 이 당시 브랜던 아이크 (Brendan Eich)로 부터 개발된 언어가 자바스크립트이다. 자바스크립트는 1996년 Netscape Navigator 2에 탑재되었고 “Mocha”로 이름이 바뀌었지만 그해 9월 “LiveScript”로 이름이 변경되었고, 12월 최종적으로 JavaScript로 바뀌었다. 2. 자바스크립트의 파편화와 표준화1996년 마이크로소프트는 자바스크립트 버전에 JScript를 IE 3.0에 탑재했다. 그렇지만 표준화 되지 못하고 브라우저에 따라 웹 페이지가 정상 동작하지 않는 크로스 브라우징 이슈가 발생하기 시작했다. 크로스 브라우징브라우저 버전에 따라 웹 페이지가 정상적으로 동작하지 않거나 다르게 해석되어 화면에 에러가 발생하는 일. 따라서 개발자는 다양한 브라우저에서 동작하는 웹 페이지를 개발 할 수 있어야 한다. 이에 따라 모든 브라우저에서 동일하게 동작하는 표준이 필요하게 되었고, 이를 위해 1996년 넷스케이프 커뮨니케이션즈는 시스템 표준을 관리하는 비영리 표준화 기구인 ECMS 인터내셔널에 자바스크립트의 표준화를 요청하였다. 3. 자바스크립트 성정의 역사 초창기에 자바스크립트는 웹 페이지에 보조 역할로 HTML/CSS를 기본적으로 렌더링 해주는 수준이었다. 렌더링(Rendering)HTML과 CSS로 표현된 데이터를 해석하여 시각적으로 브라우저에 표현하는 것을 말한다. 1999년, 자바스크립트를 이용해서 비동기적(Asynchronous)으로 서버와 브라우저가 데이터를 통신할 수 있는 Ajax (Asynchronous JavaScript and XML)가 XMLHttpRequest라는 이름으로 등장했다. Ajax는 웹 페이지의 변경이 필요 없는 부분은 다시 렌더링하지 않고, 서버로 부터 필요한 데이터만을 전송 받아 변경이 필요한 부분만 렌더링이 가능했다. 이전에 불필요한 데이터를 낭비하는 일과 렌더링 속도를 획기적으로 개선했다. 2006년, jQuery의 등장으로 DOM(Document Object Model)을 보다 쉽게 제어가 가능하고 크로스브라우징 문제가 다수 해결 되었다. 2008년, Google Maps를 통해 가능성이 확인된 자바스크립트로 더욱 빠른 자바스크립트 엔진이 필요하게 되었고, V8 자바스크립트 엔진은 이러한 요구 사항에 맞게 빠른 성능을 보여 주었다. V8엔진은 데스크톱 애플리케이션과 유사한 사용자 경험(UX)을 제공할 수 있는 웹 애플리케이션 개발 언어로 정착 되었다. 또한 웹 서버에서 동작되던 기능이 클라이언트(브라우저)로 이동하였다. 2009년, 브라우저에서만 동작하던 자바스크립트를 브라우저 이외에 환경에서 동작할 수 있는 Node.js의 등장으로 자바스크립트는 웹 브라우저를 벗어난 서버 사이드 애플리케이션 개발에도 사용되는 범용 언어가 되었다. 덕분에 프론트엔트 및 백엔트 영역까지 커버할 수 있는 언어가 되었다. 4. JavaScript와 ECMAScript 자바스크립트는 일반적으로 프로그래밍 언어의 Core를 이루는 ECMAScript와 브라우저가 지원하는 클라이언트 사이드 Web API를 포함하는 개념이다. 여기서 잠깐! ECMA란 정보 통신에 대한 표준을 제정하는 비영리 표준화 기구이다. 대표적으로 CD롬 볼륨, 파일 구조, C# 언어 규격, JSON포맷 등 일부 통신 기술에 대한 표준을 관리한다. 또한 ECMA-262 및 ECMA-402 스펙에서 표준화 되었다. JavaScript 란? ECMAScript란? 자바스크립트를 이루는 코어(Core) 스크립트 언어로 웹환경에서만 호스트 되는 언어는 아니다. ECMAScript 환경이 구현되 있는 환경에 알맞는 확장성을 가지고 있다. 브라우저는 V8엔진으로 클라이언트 지원 방식으로 ECMAScript와 Web API로 구성되어있다 따라서 Node.js는 지원하지 않는다. Node는 V8엔진으로 ECMAScript, Node API로 구성되어있다. 그렇지만 자바스크립트는 사용자 파일에 접근을 불허 하지만, node는 사용자 데이터에 접근이 가능하다. 5. 자바스크립트의 특징자바스크립트는 기존에 프로그래밍 언어에서 많은 영향을 받았다. 자바스크립트는 인터프리터 언어이다. 자바스크립트는 명령형(imperative), 함수형(functional), 프로토타입 기반(prototype-based) 객체지향 프로그래밍을 지원하는 멀티 패러다임 프로그래밍 언어이다. 4. ES6 브라우저 지원 현황","link":"/2019/04/29/TIL-190429/"},{"title":"TIL-190410-html markup 설계하기 ","text":"HTML - basicHTML이란?Hyperlink text Markup Language 약자로 웹 페이지를 구성하는 틀에 역활을 한다. 웹 디자인 인지 사항HTML는 단지 외관적으로 뿐만 아니라 내부적으로 관리가 용이하고, 간결한 CSS 설계를 위해 많은 신경을 써야 한다. 또한 많은 스타트업은 빠른 성장을 위해 웹 페이지 디자인에 접근성을 놓치는 일이 많다. 그러나 요즘 대기업, 혹은 해외 기업과 스타트업들은 장애인에 접근성을 높이기 위해 노력하는 일이 늘어나고 있다. 웹 표준 (Web Standard)W3C (World Wide Consortium)에서 정의하는 기술 표준을 말한다. 사용성과 접근성에 더 높은 초점을 가지고 웹 계발과 다양한 환경에 사용자의 이용을 보장한다. 웹 접근성 (Web Accessibility)모든 환경에 사용자에게 같은 서비스 제공하며 이용에 차별이 없도록 보장하는 것. 주로 시각, 마우스를 사용하지 못하는 장애인을 위해 제공 되며, 오디오로 웹에 전반적은 정보를 오디오로 제공한다 Head Part언어 인코딩&lt;meta charset=&quot;utf-8&quot;&gt; 태그 위에 선언해야 적용이 된다. charset (인코딩 설정) 해당문서가 어떤 언어로 인코딩 되었는지 알려준다. utf-8은 HTML5 방식으로 표기하는 방법이다. 통상 설정을 하지 않아도 작동이 되지만, 미 설정시 언어 글자가 깨져서 나오는 경우가 많다. html 언어 설정&lt;html lang=&quot;ko-KR&quot;&gt; &lt;/html&gt; 웹 접근성을 지침으로 안에 페이지의 기본 언어를 선언한다. Screen Reader 프로그램이 언어를 인식하여 자동으로 음성을 변환하거나 해당 언어에 적합한 발음을 제공한다. 시각장애인을 위한 보조 속성으로 command + f5를 누르면 실행된다. Ko을 사용하는 경우 영어를 기본적으로 제공 하지만, En은 한글 자동 변환을 지원하지 않는다. [selector] id스타일을 지정할 때 한 가지만 지정해서 사용한다. ( # selector)하나의 문서에 고유한 id 하나밖에 쓸 수 없다. class룹으로 묶어서 스타일을 지정할 때 사용한다. ( . selector) = id / class는 숫자로 시작해서는 안된다. [Multi selector] 자식 selector: [ &gt; ]~안에의 의미로 &gt; 만 사용이 가능하며 왼쪽이 부모 혹은 더 큰 selector을 넣는다.Ex) div &gt; p (div 안에 P만 선택) 후손 tag: [ space ]~안에 있는 A 모두를 선택 할 때 사용한다.Ex) div p (div 안에 P모두 선택) 그룹selector: , 다수에 selector에 공통된 스타일을 주고 싶을 경우 사용한다.Ex) div, p, a (div, p, a 모두) 특정 id 값: [ selector.id ]~안에 A 특정 태그 선택.Ex) p.foo (p태그 안에 id=”foo”을 가진 요소 선택) [Web page 설계 방식]3단 구조: header, body(content), footer4단 구조: header, navigation ,body(content), footer 1.선형화 단계화면 구성 나누기 2.시멘틱 요소그룹화 하기 3.Naming파스칼 첫 대문자카멜 첫 소문자 두번째 대문자 a. aside = 부가 정보b. article = 독립적인 , section = 콘텐츠 블록 Markup","link":"/2019/04/10/TIL-190410-html-markup-설계하기/"},{"title":"TIL-190426","text":"7일차 (0426) - 컴퓨터 공학Python - What I learn… 자료구조 Queue ADT (abstract data type) 추상 자료형 구체적인 구현 설명을 언급하지 않는, 순수하게 기능을 나열한 것을 말한다. 자료구조(연결리스트, 스택, 큐 등) 의 인터페이스(함수 시그니처),오퍼레이션을 명시해 놓은 것이다.= 자료구조의 함수 사용법을 나타냄. 배열 연결구조 (어뎁터) 파이썬의 리스트 S.empty() -&gt; Boolean스택이 비어있으면 true, 아니면 falses S.push(data) -&gt; None스택이 맨 위에 데이터를 쌓는다 S.pop() -&gt; data스택 맨 위의 데이터를 삭제하면서 반환 S.peek() -&gt; data스택 맨 위 데이터를 반환 Queue 큐 \\ (Q &gt; 자료구조)FIFO(First-In-First-Out) 방식으로 스택과 반대로 먼저 저장된 값이 제일 먼저 나온다. 즉 가장 최근에 저장된 값은 가장 먼저 나오게된다.EX) 1,2,3 -&gt; 3,2,1 Q.empty() -&gt; Boolean - 큐가 비어 있을 때에 true를, 아니면 false 반환한다. Q.enqueue -&gt; None - 큐의 맨 뒤에 데이터를 쌓는다. Q.dequeue -&gt; data - 큐 맨 앞의 데이터를 삭제하면서 반환 Q.peek -&gt; data - 큐에서 가장 위(앞)에 있는 데이터을 반환한다. add(item): item을 리스트의 끝부분에 추가한다. remove(): 리스트의 첫 번째 항목을 제거한다. Linked list 연결 리스트노드를 단위를 한다. 노드는 데이터와 다음 노드를 가리키는 참조값으로 구성되어 있다. Sigle linked list= 이전 데이터로 접근을 할 수 없다. Operations S.empty() -&gt; Boolean - 리스트가 비었다면 true, 아니면 false S.size() -&gt; None - 리스트에 있는 요소 개수 S.add() -&gt; None - 노드를 리스트의 맨 앞에 추가 S.search(target) -&gt; Node - 리스트에서 target을 찾는다 - 찾으면 노드를, 못 찾으면 None 반환 S.delete() -&gt; None - 맨 앞 노드를 삭제 Double linked list = Dummy double linked list (이중 연결 리스트) = 데이터를 가지지 않은 노드 = 구현 편의성이 높아진다. Operations구조 Head – 리스트 맨 앞에 있는 더미 Tail – 리스트 맨 뒤에 있는 더미를 가리킨다. d-size – 리스트의 요소 개수 Operations S.empty() -&gt; Boolean -리스트가 비었다면 True,아니면 False S.size() -&gt; integer -리스트에 있는 요소 개수 Insert 계열 공부 리스트순회 (traversal) 배열1|2|3|4|5|6 장점) 검색이 빠르다 -&gt; 인덱싱O(1) 단점) Insert =&gt; delete O(n) 연결리스트1-2-3-4-5-6 장점) 검색이 느리다O(n) 단점) Insert =&gt; delete O(1) 성형 자료구조Linked listStackQueue비선형 자료구조Tree 순회(traversal)a. 전위 (preorder)b. 중위 (in order)c. 후위 (post order)a,b,c, = stack =&gt; DESd. 레벨순서 (level order) BST (binary search tree)O(n^2) -&gt; search 균형 이진 트리(balanced, self balanced)a. AVL. 트리b. RED-black 트리 B-tree (데이터베이스 인덱스)균형 이진트리+ …아키텍쳐 Heap (완전 이진트리, 배열) Hash tree (map) Hash function collision (충돌)a. chaining (체이닝)b. open – addressing 기법 graph (그래프) 순회 (travelsal)a. DFS – 깊이를 우선 탐색 -&gt; 스택b. BFS – 너비 우선 탐색 -&gt; Queue MST(최소 신장 트리)Minimum spanning tree-&gt;greedy algorithm-krusskal algorithm-prim algorithm 최단경로 문제(shortist path) Dijksta algorithm-greedy algorithm 2. bellmam-ford algorithm 3. flord-warshall algorithm-dynamic programming","link":"/2019/04/26/TIL-190426/"},{"title":"TIL-190502","text":"4일차 (0502) - JavascriptJavascript - What I learn… 연산자 1. 표현식과 연산자표현식 (expression)은 리터럴, 식별자(변수명, 함수명 등), 연산자, 함수 등 토큰(Token)의 조합을 말한다. 즉 표현식은 하나의 값으로 평가(evaluation) 될 수 있는 문을 말한다.표현식은 결국 하나의 값이 되므로 표현식은 값으로 사용할 수 있다. 즉 값에 위치에 표현식을 위치할 수 있다. var x = 10; // 표현식 x + 30은 식별자 표현식과 숫자 리터럴과 연산자의 조합으로 구성되어 있다. console.log(x + 30); // 40 표현식은 표현식을 결합해 새로운 값을 만들어 내는것이 가장 일반적이다. 2. 문과 표현식문(statement)은 하나 이상의 표현식과 키워드의 조합으로 구성된 자바스크립트 엔진에게 내리는 명령이다. 문이 실행이 된다는 것을 명령이 시작되고, 문의 집합을 순서에 맞게 나열한 것을 프로그램이라고 부른다. 자바스크립트의 모든 코드는 문 또는 표현식이다. 표현식의 역할은 값을 생성하는 것이다. 문의 역할은 표현식으로 생성한 값을 자바스크립트에 명령(문에 대표적 특징)을 내리는 것이다. 문은 구성 뒤에 세미콜른(;)으로 끝나며, 단 코드 블록{…}뒤에는 세미콜론을 붙이지 않는다. 세미콜론 자동 삽입 기능(ASI, automatic semicolon insertion)문의 끝에는 세미콜론을 옵션으로 본다. 자바스크립트 엔진에는 세미콜론을 자동으로 붙여주지만, 개발자의 예측과 의도에 다른 경우도 간혹 있다. 3. 표현식인 문과 표현식이 아닌 문표현식은 값이 평가될 수 있는지 없는지에 따라 결정된다. 즉 선언문은 표현식이될 수 없지만, 할당문은 값을 평가할 수 있으므로 자체적으로 표현문에 의미가 성립한다. 표현문이 맞는지 의문이 든다면, 변수에 할당해 보는 것이다. 즉 표현문은 값을 나타내므로 변수에 할당이 가능하다. // 변수 선언문은 표현식이 아닌 문이다.var x ;// 할당문 자체가 표현식이지만 완전한 문이기도 하다. 즉, 할당문은 표현식인 문이다.x = 100;// 표현식이 아닌 문은 값처럼 사용할 수 없다.(할당문)var foo = var x; // SyntaxError: Unexpected token var할당문 자체를 값으로 사용이 가능하다. 완료 값 (Completion value)크롬 개발자 도구는 표현식이 아닌 문은 언제나 undefined를 출력한다. 완료 값은 변수에 할당할 수 없다. 4. 연산자(Operator)란?하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리, 타입 연산(operation)등을 수행해 하나의 값을 만든다. 연산의 대상을 피연산자(Operand)라 하며, 피연산자도 평가가 가능하다. 5. 산술 연산자(Arithmetic Operator)란?수학적 계산으로 새로운 숫자값을 만드며, 산술 연산이 불가능한 경우 NaN을 반환한다. (산술 연산자와 피연산자의 개수에 따라 이항 산술 연산자와 단항 산술 연산자로 구분한다.) 5.1. 이항 산술 연산자2개의 피연산자를 산술한다. 이항 연산자는 피연산자의 값을 변경하는 부수 효과(side effect)가 없다. 즉 항상 새로운 값을 만들어 낸다. 5.2. 단항 산술 연산자5.3. 문자열 연결 연산자6. 할당 연산자7. 비교 연산자7.1. 동등 / 일치 비교 연산자7.2 대소 관계 비교 연산자8. 삼항 조건 연산자9. 논리 연산자10. 쉼표 연산자11. 그룹 연산자12. Typeof 연산자","link":"/2019/05/02/TIL-190502/"},{"title":"TIL-190503","text":"5일차 (0503) - JavascriptJavascript - What I learn… 제어문","link":"/2019/05/03/TIL-190503/"},{"title":"TIL-190504","text":"6일차 (0504) - JavascriptJavascript - What I learn… 타입 변환과 단축 평가","link":"/2019/05/04/TIL-190504/"},{"title":"HOW TO START GIT COOPERATIVE WORK.","text":"Repository 만들기 깃을 가입합니다. 오른쪽 상단에서 “Your Profile”을 클릭하면 자신의 계정에 프로필로 들어갑니다. 자신에 프로필 페이지에서 다양한 세팅을 할 수 있지만 프로젝트 진행을 위해 “Repositories”에 들어갑니다. Repositories”에서 초록색 UI “NEW”을 눌러 새로운 Repositories”을 생성해줍니다. 가장먼저 자신에 유저 아이디를 볼 수 있습니다.a. 옆에 Repositories”, 프로젝트 이름을 입력해줍니다.b. 초록색 체크 박스가 나타나면, 사용이 가능한 이름입니다.c. 가장 먼저, 프로젝트의 설명과 제작 방식 등을 기입 할 수 있는 “README.md” 파일을 만들기 위해 “Initialize this repository with a README”을 선택해줍니다.d. 추가로 “Description”에 프로젝트에 간단한 설명을 넣어 줍니다. 성공적으로 “Repositories”을 생성하고 프로젝트를 시작할 준비가 되었습니다. ‘Repositories”을 들어가면 “README” 파일이 생성된 것을 볼 수 있습니다.","link":"/2019/04/18/git-협업-프로젝트-시작하기/"},{"title":"TIL-190505","text":"7일차 (0505) - JavascriptJavascript - What I learn… 객체 리터럴","link":"/2019/05/05/TIL-190505/"},{"title":"TIL-190501","text":"3일차 (0501) - JavascriptJavascript - What I learn… 데이터 타입 데이터 타입1. 데이터 타입이란 무엇인가? 왜 필요한가?데이터 타입(Data type = 타입)은 값의 종류를 말한다. 자바스크립트는 모든 값을 데이터 값을 가지고 있다. 1.1 데이터 타입에 의한 메모리 공간의 확보프로그래밍을 하기 위해 사용되는 메모리는 저장하고 참조할 수 있어야 한다. 우선 적으로 몇 byte의 메모리 공간을 저장할 수 있는지 알아야 확보해야 할 메모리 크기를 결정할 수 있다. 1.2 데이터 타입에 의한 값의 해석데이터 타입은 메모리 공간의 주소를 찾아가야 하기 때문에 매우 중요하다. 그렇지만 왜 중요할까? 값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해 값을 참조할 때 한번에 읽어 들어야 할 메모리 공간의 크기를 결정하기 위해 메모리에서 읽어 들인 2진수를 어떻게 해석할 지를 결정하기 위해 2. 값 값(value)은 더이상 평가할 수 없는 하나의 표현식이다. 즉 새로운 값에 정의가 명확해진 것으로 하나의 값으로 메모리 공간 자체를 말한다. 3. 값의 생성값은 리터럴 표기법을 사용하며, 다양한 방법으로 표현, 생성할 수 있다. 리터럴(Literal)소스코드 안에 리터럴 표기법으로 생성한 직접 만들어 낸 고정된 값 자체를 말한다. 3.1.1 리터럴 표기법을 통한 값의 생성리터럴 표기법(Literal notation)은 값을 생성하는 가장 기본적인 방식으로 의미를 가지고 있는 값에 최소 단위이다. 다양한 타입 값(숫자, 문자열, 불리언, null, undefined, 객체, 배열, 함수, 정규 표현식 등)을 가지고 있으며 자유롭게 생성할 수 있다. // 정수 리터럴 100 // 부동 소숫점 리터럴 10.5 // 2진수 리터럴(0b로 시작) 0b01000001 // 8진수 리터럴(ES6에서 도입. 0o로 시작) 0o101 // 16진수 리터럴(ES6에서 도입. 0x로 시작) 0x41 // 문자열 리터럴 'Hello' \"World\" // 불리언 리터럴 true false // null 리터럴 null // undefined 리터럴 undefined // 객체 리터럴 { name: 'Lee', gender: 'male' } // 배열 리터럴 [ 1, 2, 3 ] // 함수 리터럴 function() {} // 정규표현식 리터럴 /ab+c/ 3.2.2 값과 리터럴의 관계 var score = 100; 더 이상 평가할 수 없는 리터럴이자 변수에 할당할 수 있는 값이면서 리터럴에 조건에 충족한다. var scroe = 50 + 50; 연산자를 이용해 값을 생성하는 문을 표현식(expression)이라고 한다. 리터럴 값으로 가장 기본적으로 최소 값을 가지고 있다. 3.2 표현식표현식(expression)은 리터럴, 식별자(변수명, 함수명 등), 연산자, 함수 호출등의 조합을 말한다. 즉 하나의 값으로 평가될 수 있는 문(statement)이다. // 리터럴 표현식 10 'Hello' // 식별자 표현식 sum person.name arr[1] // 연산자 표현식 10 + 20 sum = 10 sum !== 10 // 함수/메소드 호출 표현식 square() person.getName() 4. 데이터 타입의 분류ES6 기준 자바스트립트는 7개읠 데이터 타입을 제공하며 1개의 객체 타입을 포함한다. 원시타입 (primitive type) 숫자 (number) 타입: 숫자(정수, 실수) 문자영 (string) 타입: 문자열 불리언 (bloolaam) 타입: 논이적 참 / 거짓 undefined 타입: 선언은 되었지만 값이 없는 변수에 암묵적으로 할당되는 값 null 타입: 값이 없다는 것을 의도적으로 명시할 값 symbol 타입: ES6에서 새롭게 추가된 7번째 타입 객체 타입 (object / reference type): 객제, 함수, 배열등 데이터는 보기에 같아도 목적이 다르며, 저장되는 메모리에 크기도 다를수 있다. 5. 숫자 타입ECMAScript 따라 숫자 타입은 64비트 부동소수점 형식(double-precision 64-bit floting-point: -(2^52 -1)~2^53 -1 사이의 숫자 값)을 따른다. 즉 실수로 표현하기 때문에 정수 표현이 어렵다. 정수로 되고, 정수로 표시 한다고 해도, 자바스크립트는 그 숫자를 실수로 받아들여서 연산시 정확한 값을 도출하기 어렵다. 숫자 타입은 3가지 특별한 값을 표현이 가능하다 Infinity: 양의 무한대 -Infinity: 음의 무한대 NaN: 산술 연산 불가 (Not-a-Number)– 자바스크립트는 대소문을 구별 하므로 에러에 주의한다. 6. 문자열 타입문자열(string) 타입은 텍스트 데이터를 나타내는데 사용된다. 문자열을 생성할 때는 작은 따옴표(‘ ‘), 큰 따옴표(“ “), 또는 배틱 ()안에 문자열을 넣는다. 자바스크립트에서는 일반적으로 작은 따옴표를 쓰는 것을 권장하며, 암묵적인 룰로 작용하고 있다. 자바스크립트에서 문자열은 원시 타입으로 변경이 불간능한 값(immutable value)이다. 즉 문자열이 한번 생성되면, 그 문자열을 변경할 수 없다. 6.1 템플릿 리터럴ES6 부터 템플릿 리터럴(Template literal)이라고 불리는 문자열이 도입되었다. 템플릿 리터럴은 작은 따옴표와 큰 따옴표를 혼용할 수 있는 방식으로 만약 두 따옴표가 한 문장에 있다면 백틱을 사용하여 묶을수 있다. 또한 일반적인 문자열과 달리 문자열 사이에 공백이 적용되며, 줄 바꿈은 허용되지 않는다. 단 백슬래시()로 이스케이프 시퀀스(Escape Sequence)를 사용할 수 있다. 문자열은 + # + 문자열 연산자를 통해 연결할 수 있다. var first = 'hyun-ho'; var last = 'Lee'; // ES5: 문자열 연결 console.log('My name is ' + first + ' ' + last + '.'); 하지만 탬플릿 리터럴은 연산자를 사용하지 않아도 문자열을 삽입할 수 있는대 이를 문자열 인폴레이션(String Interpolation)이라 한다. var first = 'hyun-ho'; var last = 'Lee'; // ES6: 문자열 연결 console.log('My name is ${first} ${last}.'); 문자열 인터폴레이션은 \\${expression}으로 표현식을 감싼다. 단 이때 문자열을 타입으로 변환된다. 7. 불리언 타입불리언(boolean)타입의 값은 논리적 참(true)와 거짓(false)으로 나눈다. 주로 프로그램에 흐름을 제어하는 조전문에 사용된다. 8. Undefined 타입선언 이후 명시적으로 값을 할당하지 않는 변수는 자바스트립트 엔진의 의해 암묵적으로 초기화 되는데 이때 값이 undefined 값을 가진다. 즉 값이 할당이 되지 않은 변수에 접근하면 undefined가 반환된다. 9. Null 타입10. Symbol 타입11. 객체 타입12. 동적 타이핑 typeof 연산자변수에 할당된 값의 데이터 타입을 반환한다. 12.1 동적 타입 언어와 정적 타입 언어정적 타입(Static/Strong type)언어는 변수를 선언할 때 데이터 타입을 사전에 선언해야 한다. 이를 명시적 타입 선언(Explicit type declaration)이라 한다 정적 타입 언어는 변수 타입을 변경할 수 없으며, 선언한 타입에 값만 할당할 수 있다. 타입이 맞지 않으면 실행 차제를 막기 때문에 안정적으로 코드를 구현하고 런타임 에러를 줄일수 있다. 정적 타입 언어는 C, C++, java, Kotlin, Go, Haskell, Rust, Scala 등이 있다. 12.2 동적 타입 언어와 변수동적 타입(Dynamic typing)언어는 변수를 선언할 때 데이터 타입을 자유롭게 할당할 수 있다. 동적 타입에 언어는 변수 선언이 아닌 할당에 의해 결정된다.즉 재할당에 의해 변수의 타입은 언제든지 변경할 수 있다. 그렇지만 복잡한 프로그램에서 동적 변화 데이터는 추적이 어렵고, 의도치 않은 충동을 만들어 낼수 있다. 또한 데이터 저장 값을 확인하기 전까지 값을 확신할 수 없다. 결국 동적 타입 언어는 유연성(flexibility)은 높지만 신뢰성(reliabiity)은 떨어진다 주의사항 변수의 사용을 적그적으로 줄인다. 변수의 개수가 많으면 오류가 발생할 확률은 높아진다. 전역 변수는 사용하지 않는다. 변수의 생명주기를 최대한 짧게 만든다. 변수보다는 상수를 사용해 값을 변경을 억제한다. 변수명은 변수의 존재 이유를 파악할 수 있도록 명명한다. 동적 타입 언어는 Python, PHP, Rudy, Lisp, Perl","link":"/2019/05/01/TIL-190501/"},{"title":"TIL-190430","text":"2일차 (0430) - JavascriptJavascript - What I learn… 변수 변수1. 변수란 무엇인가? 왜 필요한가?변수는 데이터를 관리하기 위한 핵심 개념이다. 10 + 20 CPU가 연산을 하기 위해선 연산자의 좌변과 우변에 숫자 값을 기억해야 한다. 이때 컴퓨터는 메모리를 사용한다. 메모리데이터를 저장할 수 있는 메모리 셀(memory cell)들의 집합체이다. 각 메모리는 1byte(8bit)에 크기를 가지고 있고 데이터를 저장(write), 읽기(read)가 가능하다. 컴퓨터는 모든 데이터(숫자, 텍스트, 이미지, 동영상)를 2진수로 처리한다.메모리는 고유 주소로 표시가 되고, 이 공간의 위치를 0부터 메모리 크기 만큼에 정수로 표시한다. [4,294,967,295(0x00000000 ~ 0xFFFFFFFF) = 4GB] 숫자 값 10, 20은 메모리의 임시 주소에 저장되고 이 값으로 CPU 연산을 수행한다. 결과 값 30또한 임시 주소에 저장된다. (표기는 10진법이지만, 실제 메모리 상에는 2진수로 저장 된다) 그렇지만 이렇게 저장된 30의 결과는 재사용이 불가능하다. 이러한 데이터를 재 사용 하기 위해 변수를 사용해야 한다. 변수(Variable)하나의 값을 저장할 수 있는 메모리 공간에 붙인 이름 또는 메모리 공간 자체를 말한다. 개발자는 메모리 주소를 직접 다루지 않아도 변수 값을 할당(assignment 대입, 저장)하거나 참조(reference)할 수 있고 값을 변경할 수도 있다. var result = 10 + 20; “result” 라는 변수값은 메모리 주소에 저장한다. 이러한 방식을 할당(assignment 대입, 저장)이라고 하고, 변수를 읽는 행동을 참조(reference)라고 한다. 식별자(Identifier)변수명 보다 상위에 개념으로 변수, 함수, 클래스 등 이름을 구별할 수 있는 이름이 모두 포함 된다. 즉 사람이 이해할 수 있는 고유한 이름을 가리키는 값이다. 식별자 즉 변수명은 개발자을 위한 문서이다. 저장된 값의 의미를 명확히 함으로서 가독성을 높이고 이해하기 쉽게 만들어 협업과 코드에 품질 향상에 도움을 준다. 2. 변수 선언 (Variable Declaration)변수명을 자바스크립트 엔진에 존재를 알려 관리할 수 있도록 하는것. 변수를 사용하기 위해선 반드시 선언을 통해야 한다.변수를 선언 할 때는 var, let, const의 키워드로 사용한다. ES6가 도입 되기 이전에는 오직 var만 사용이 가능했지만, var의 블록 레벨 스코프(Block-level-scope) 단점으로 let, const이 ES6에서 추가 되었다. var score; Score는 뒤에 오는 변수명으로 새로운 변수를 선언 할 것을 지시하는 키워드이다. 키워드(keyword)키워드는 자바스크립 엔진이 수행할 동작을 규정한 일종의 명령어이다. 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행한다. 키워드가 실행되면 자바스크립트 엔진은 새로운 변수를 선언한다. 리팩토링외부 동작을 바꾸지 않으면서 내부 구조를 개선하는 방법. 즉 코드를 보다 이해하기 쉽도록 수정하는 행동 변수명을 선언하고 값을 저장할 메모리 공간을 확보한다. “undefined”는 빈 공간이 아니라 암묵적으로 값이 할당되어 초기화된다. *undefined 자바스크립트가 제공하는 원시 타입 값 (peimitive value) 자바스크립트 엔진 변수 선언 단계 선언 단계(Declaration Phase): 변수명 등록 및 자바스크립트 엔진에 변수에 존재를 알림 *변수명 등록변수명 및 모든 식별자는 실행 컨텍스트(Execution Context)의 렉시컬 환경(Lexical Environment)에 등록된다. 실행이 가능한 코드는 평가하고 실행에 필요한 환경을 관리 한다. 초기화 단계(Initialization Phase): 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당. *Garage Value이전에 다른 애플리케이션이 사용했던 값이 남아있거나, 메모리에 공간을 확보한 후 다음 값을 할당하지 않고 참조하면 나오는 값 3. 변수 선언의 실행 시점과 변수 호이스팅&lt;pre&gt; Console.log(score); Var score: &lt;/pre&gt; 자바스크립트는 위에서 한 줄씩 순차적으로 실행되는 방식으로 참조가 변수 선언보다 앞에 있을 경우 참조 에러(ReferenceError)가 발생한다. 여기서 에러는 undefined로 출력 된다. 자바스크립트는 인터프리터 언어로서 동적 기능을 살리면서 실행 속도가 느리다는 단점을 극복한다. AST모든 언어는 소스코드는 단순히 문자열로 구성되어 있다. 따라서 문법적 의미와 구조를 갖는 자료 구조인 AST (Abstract Syntax Tree, 추상적 구문 트리)를 생성한다. AST는 바이트 코드 또는 머신 코드를 생성하여 실행한다. 변수 호이스팅(Variable Hoisting)이란변수 선언문이 코드의 선두로 끌어 올려진 것 처럼 동작하는 자바스크립트의 특징 4. 값의 할당변수에 갑을 할당 할 때는 할당 연산자(=)를 사용한다. 할당 연산잔는 우변의 값을 좌변에 변수로 할당한다. 변수에 값을 할당할 때는 이전 값 undefined가 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 할당 값 80을 새롭게 저장하는 것이 아니라 새로운 메모리 공간을 확보하고 그 메모리 공간에 할당 값 80을 저장하는 것에 주의하자. 5. 값의 재할당Var을 사용하여 선언한 변수 값을 재할당 할 수 있다. 재할당이란 현재 변수가 저장하고 있는 값을 버리고 새로운 값을 저장하는 것이다. 만약 재할당을 할 수 없어서 변수에 저장된 값을 변경 할 수 없다면, 그것을 상수(Constant)라 부른다. 상수는 한번 정해지면 값이 변하지 않는다. 즉 상수는 단 한번만 할당이 가능하다. 만약 초기에 지정한 값을 새로운 값으로 변경하고, 변경 값이 저장 후 이전 값을 undefined로 교체한다. 이전 값이 더 이상 필요하지 않은 값이 된다면 가비지 컬렉터 (Garbage Collator)에 의해 자동으로 메모리에서 해제된다. 매니지드 언어(Unmanaged Language)C 언어와 같이 개발자가 명시적으로 메모리를 할당, 해제하기 위해 malloc(), free()와 같은 저수준 (low-level)메모리 관리 기능을 제공한다. 메모리 관리를 개발가 주도 하므로 최적에 퍼포먼스를 확보할 수 있지만 반대로 많은 오류를 만들어 낸다. 매니지드 언어(Managed Language)자바스크립트와 같이 메모리를 할당, 해제가 제한되며, 모든 기능을 언어 차원에관리된다. 또한 가비지 컬렉터 (Garbage Collator)가 메모리 해제수행하며 개발자는 어떠한 직접적인 제어를 할 수 없다. 그러나 일정한 생산성확보하고 메모리 관리에 신경을 쓰지 않아도 된다는 장점을 가지고 있다. 8. 식별자 네이밍 규칙 식별자는 특수문자를 제외한 문자, 숫자, underscore( _ ), 달러 기호(\\$)를 포함할 수 있다. 단, 식별자는 특수문자를 제외한 문자, underscore( _ ), 달러 기호(\\$)로 시작해야 한다. 숫자로 시작하는 것은 허용하지 않는다. 예약어는 식별자로 사용할 수 없다. 예약어 = keywordawait break case catch class const continue debugger default delete do else enum export extends false finally for function if implements import in Instanceof interface let new null package private protected public return super static Switch this throw true try typeof var void while with yield* 일반적으로 변수와 함수의 이름에는 카멜 케이스를 사용하고 생성자 함수, 클래스의 이름에는 파스칼 케이스를 사용한다.코드 전체의 가독성을 높이려면 네이밍 컨벤션을 따르는 것이 유리하다.","link":"/2019/04/30/TIL-190430/"},{"title":"TIL-190423","text":"5일차 (0423) - 컴퓨터 공학Python - What I learn… 이진 탐색. big O Process vs thread Recursion 재귀 [Binary search] 이진 탐색이진 검색은 정렬된 리스트에서 원하는 항목을 찾기에 효율적인 알고리즘 입니다. 리스트를 반으로 나누고 타겟 값이 나올 때까지 항목을 좁혀갑니다.선형 검색(linear search)는 모든 항목을 하나씩 검사해야 하는 문제가 있어 항목이 많다면 이진 탐색이 적절합니다. [이진 탐색 절차] Low = 0, high = n-1 로 초기화 Mid는 (low + high)을 2로 나눈 몫으로 결정합니다. Data[mid]와 target이 서로 같으면 탐색 종료 만약 target &lt; data[mid]이면 high = mid-1로 업데이트 한 후, 2회 돌아갑니다 [Segmentation]가상 메모리를 관리하는 기법으로 가상 메모리에 로드된 프로세스가 가상에 공간에 물리 메모리를 갖고 있는 것처럼 사용할 수 있다. 가상 메모리는 각 프로세스당 메인 메모리와 동일한 크기로 할당되며, 프로세스의 일부만 메모리에 로드하고 나머지를 보조 장치에 로드하는 형식으로 작동 된다. – Segmentation 기법이란메모리를 논리적 내용의 단위로 잘라 분할된 메모리를 할당하여 물리 주소로 부터 블록 단위로 변환하는 것을 말한다. – Paging 기법Segmentation과 가상 메모리를 고정된 크기로 나누어 메모리를 관리하는 기법이다. 즉 큰 용량에 작업을 작게 쪼개어 처리하는 방식으로 불연속적인 메모리 요청 등에 유연하게 처리할 수 있다. Segmentation 과 다르게 고정된 크기로 할당하는 방식으로 차이점을 보인다. – page frame페이지(고정된 크기의 블록)를 물리 메모리와 같은 크기로 나누어진 블록 단위. 물리 메모리를 사용하는 최소 크기 단위 – page fault가상 메모리 주소를 할당하는 방식으로 RAM의 부족한 용량을 보완하는데 사용한다. 가상 메모리를 사용하는 최소 크기 단위 구조 Code Data Heap Stack Cache메모리 계층 중 하나로 속도가 빠른 장치와 느린 창치간의 속도차에 따른 병목 현상을 줄이기 위한 범용 메모리. 데이터 지역성(locality)의 원리를 사용한다. – Cache hit적중율의 극대화로 Cache Access 시간 최소화 – Cache miss실패율에 따른 지연시간(Miss Penalty) 최소화 Big - o알고리즘에 효율성을 나타내는 지표로서 내가 개선한 알고리즘에 효율성, 연산 속도를 비교하기 위해 사용합니다. O(1) 상수 시간 (속도가 빠르다) / =&gt; arr [0] / linked-list insert, delete O(log n) 로그 시간 / =&gt; BST O(n) 선형 시간 / =&gt; linked-list search 배열 삽입, 삭제 O(n log n) 선형 로그 시간 / =&gt; quick sort, merge sorta. Comparism sorting (비교 정렬) O(n^2) 지수 시간 / 버블 sort, 선택 정렬, 삽입 정렬 Compiler vs interpreter Process =&gt;OSa. Job scheduling and scheduleri. Context switchingb. Process statusi. Tread =&gt; multithreading Concurrency programming (동시성 프로그래밍)a. Multi-threading =&gt; CPU (bound) 작업이 많을 떄 사용i. Race-conditionii. Dead-lockb. Asynchronous I/O (I/O bound) Multi-threading 메모리, 성능에 매우 우월함 Race condition Program(image) 하드 디스크에 저장되어 있는 “하나”의 이미지(code/data) Process 메인 메모리에 올라와서 실행을 시작한 프로그램 PID (process ID) 선정형 스케줄러 : preemptive scheduling (Preemption) =&gt; multi-tasking 가능 비선정형 스케줄러: non- preemptive scheduling Process status (infographic) 알고리즘 구성 • Priority algorithm• Round-robin algorithmo 정해진 시간 동안 실행 Time slice QuantumI/O 작업 =&gt; 네트워크속도가 느리지만 CPU가 필요 없다 Thread =&gt;Context-switching =&gt;CPU에 저장 되어있는 레지스터 값을 PCB 레지스터에서 교체 되는 행위 = 라운드 로빈에서 타임 슬라이스가 지날 때마다 일어난다Instruction Register (IR)현재 실행되고 있는Program counter (PC) PCB Process vs thread실행 흐름 – Instruction인스트럭션(기계어)에 나열 VAS = visual address space 가상 주소 공간 GIL = global interpreter lock Parallel programming /하드웨어가 다수 필요함 Concurrency programming한개의 하드웨어로 Single core multithreading Multi core multithreading Multithreading =&gt; 공유 자원이 필요하다Race condition이 발생함: 한정된 자원을 여러 개의 프로세스다 동시에 이용이 될 때 프로세스가 자원 이용을 위해 경쟁을 벌이는 현상 Critical Section임계영역어떤 스레드에서 공유 자원에 접근한 후수정, 변경 하려는 코드$ lock=threading.Lock() $ lock.release()Recursion 재귀 함수 호출 도중에 자기 자신을 다시 호출하는 것 Base case (기저 조건)재귀 호출에 빠지거나, 재귀 호출을 일으키지 않는 함수의 기본 케이스 이다. Terminal case (종료 조건, 탈출 조건)\\$ def func(n):// Print (n) =&gt; I/O작업 #base caseIf n &lt;= 0;ReturnFunc(n-1) 재귀함수 만드는법 패턴을 찾는다  점화식을 만든다 기저 조건을 만든다 Factorial (계승)3! = 321 3!= 32! 2!=21! 5! = 5*4*3*2*1 점화식 Fac(n) = fac(n-1)*n 기저 조건 n==1 or n==0 return 1 test) def factorial (n):if n==0 or n==1:return 1return factorial (n-1) *nfor i in range (1,6):print (factorial(i))fibonacci series피보나치점화식fibo(n) = fibo(n-2) + fibo (n-1)기저 조건if n==1 then 0If n==2 then 1 Def fibo(n): If n==1: Return 0 elIf n==2: Return 1 Return fibo(n-2) + fibo(n-1) For i in range (1, 11): Print (fibo(i), end=’ ’)","link":"/2019/04/23/TIL-190423/"}],"tags":[{"name":"html, web","slug":"html-web","link":"/tags/html-web/"}],"categories":[{"name":"TIL","slug":"TIL","link":"/categories/TIL/"},{"name":"Algorithm Study","slug":"Algorithm-Study","link":"/categories/Algorithm-Study/"},{"name":"Project","slug":"Project","link":"/categories/Project/"},{"name":"drunk_code 협업 Project","slug":"Project/drunk-code-협업-Project","link":"/categories/Project/drunk-code-협업-Project/"}]}