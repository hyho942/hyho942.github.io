{"pages":[],"posts":[{"title":"Algorithm study_01","text":"title: 내용","link":"/2019/04/22/Algorithm-study-01/"},{"title":"TIL_190401","text":"1일차(0401) - HTML/CSSHTML/CSS - What I learn… html의 기본 구조 시맨틱 마크업 박스 모델 XMLXML은 Extensible Markup Language의 약자이며, W3C에서 개발된 표준 권고안 마크업 언어이다. XML은 데이터를 저장하고 전달할 목적으로만 만들어졌습니다. HTML과 다르게 미리 정의되어 있는 구조가 아닌, 사용자가 직접 정의해서 사용할 수 있습니다. HTML 4.01 vs HTML 5.0WHATWGWeb Hypertext Application Technology Working Group의 약자로 인터넷이 보급화 되면서, 무분별한 웹 형식과 액티브 X같은 플러그인으로 인해 웹 페이지가 무거워 졌습니다. 그래서 W3C에서 제안한 표준안으로 만들어진 그룹이다. HTML 기본 구조3단 Structure < html > < head > < /head > < body > (content) < /body > < footer > < /footer > < /html > 4단 Structure < html > < head > < /head > < nav > < /nav > < body > (content) < /body > < footer > < /footer > < /html > 선형화 단계 (Linearization Step)논리적으로 HTML을 구성하기 위해 마크업은 규칙에 따라 콘텐츠를 설계하는 단계이다. 선형화 단계를 거치면 전체적은 웹 페이지에 구성을 보기 쉽게 정리할 수 있고, CSS 작업시 좀더 간결한 작업을 할 수 있다. 시맨틱 요소 (Semantic Element)&lt; header &gt;&lt;div id=”header”&gt; &lt;header class=&quot;header&quot;&gt; header는 html 문서에 첫 머리말로 사용이 가능하여 여러번 사용이 가능하다. 즉 section, body 안에 header을 사용하여 구분을 짓기 위해 사용이 가능하다. &lt; footer &gt;&lt;div id=&quot;footer&quot;&gt; &lt;footer class=&quot;footer&quot;&gt; Webpage의 Copyright이나 회사 주소 정보를 사용 할 수 있다.section에 꼬리말로 사용하고 html 내에서 다수 사용이 가능하다. &lt; section &gt;&lt;div id=&quot;section&quot; class=&quot;section&quot;&gt;&lt;/div&gt; &lt;section id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/section&gt; 콘텐츠를 grouping 할 때 사용. Section 안에 section을 사용 할 수 있어서 중첩 사용이 가능하다. &lt; nav &gt;&lt;div id=&quot;nav&quot; class=&quot;nav&quot;&gt;&lt;/div&gt; &lt;nav id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/nav&gt; Navigation의 줄임말. navigation 메뉴를 나타낸다. 주로 헤딩 부분에 사용하지만, body 내부에 navigation 섹션에도 사용이 가능하다. &lt; article &gt;&lt;div id=&quot;article&quot; class=&quot;article&quot;&gt;&lt;/div&gt; &lt;article id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/article&gt; 독립적인 글들을 나타낼 때 사용. 블로그 포스팅 표현 할 때 사용하지만, RSS feed로 배포할 가치가 있는 컨텐츠에 사용한다. &lt; aside &gt;&lt;div id=&quot;aside&quot; class=&quot;aside&quot;&gt;&lt;/div&gt; &lt;aside id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/aside&gt; 콘텐츠와 관계 있는 부가 정보들을 표시 할 때 사용한다. 주로 side-bar콘텐츠들을 담기 위해 사용하기도 한다. &lt; main &gt;&lt;div id=&quot;main&quot; class=&quot;main&quot;&gt;&lt;/div&gt; &lt;main id=&quot;#&quot; class=&quot;#&quot;&gt;&lt;/main&gt; 주로 웹 페이지를 구성하는 메인 콘텐츠를 담는 태그이다. body 태그를 사용하여 구분할 수 있다. HTML 네이밍- [selector] id스타일을 지정할 때 한 가지만 지정해서 사용한다. ( # selector)하나의 문서에 고유한 id 하나밖에 쓸 수 없다. class그룹으로 묶어서 스타일을 지정할 때 사용한다. ( . selector) | id / class는 숫자로 시작해서는 안된다.| - [Naming convention] 식별자의 명칭이 되는 문자열에 방식을 결정하기 위한 규칙. 가독성, 시인성, 효울성에 목적을 가진다. 프로젝트, 프로그래밍 언어, 개발도구에 따라 방식을 결정한다. - [Coding Conventions] 프로그래밍 스타일에 관한 가이드 라인 모음. - [표기법] 카멜 표기법 / “camelCase” 각 단어의 첫문자는 대문자로 표기. 단 맨 처음 단어는 소문자로 시작.(띄어쓰기 대신 대문자로 구문함) 파스칼 표기법 / “PascalCase” 모든 단어의 첫문자를 대문자로 시작. 스네이크 표기법 / “snake_case” 단어를 밑줄문자로 구분하는 표기법 Perl, PHP, Python, Ruby, Rust 언어는 주로 스네이크 표기법을 사용한다. 헝가리언 표기법 / “strHungarian” 접두어를 사용하는 표기법 접두어 예시 b / 불리언 (boolean) ch / 문자 (char) f / float sz / NULL로 끝나는 문자열 (string+zero) WAI-ARIA정의Web Accessibility Initiative-Accessible Rich Internet Applications.WAI-ARIA는 접근성 및 상호 운용성을 향상시키기 위해 마크업에 역할 (Role), 속성 (Property), 상태 (State) 추가하여 스크린리더 및 음성지원 보조기기 사용을 용이하게 해준다. CSS - Box model박스 앨리먼트의 hight와 width로 사각형 박스 모양을 가지고 있다. 박스 모델은 마진(margin), 패딩(padding), 보더(border)로 구성되어 있다. normal flow일반적인 상황에서 각각의 요소들이 배치되는 순서를 뜻하는 말로서 기본 페이지 레이아웃에서 블록요소들은 기본적으로 상하 배치된다. flexfloatclearPseudo-Element(가상요소)::before, ::after, :hover","link":"/2019/04/01/TIL-190401/"},{"title":"TIL-190402","text":"2일차(0402) - HTML/CSSHTML/CSS - What I learn… CSS 레이아웃 선택자 레벨(점수) Table Position 브라우저 접두사 CSS 기초 상속의 이해 겹침의 개념 우선순위 레이아웃 position float display DOM Tree란? 선택자 파워 element &lt; class &lt; id &lt; inline-style Color Font font-size, font-weight, font-variant, line-height(특징 알기), font-family 브라우저별 지원 형식이 다름 rem, em, px 차이 알아보기 Table Position relative, absolute, fixed, sticky 각각의 특징 알기 브라우저 접두사 -webkit, -ms, -o, -moz","link":"/2019/04/02/TIL-190402/"},{"title":"TIL-190403-git blog 시작하기","text":"Hexo git blog 시작하기Node 설치Hexo를 사용하려면 Node 설치가 필요하다. 여기 를 통해 다운로드가 가능하다. Hexo 설치Command를 통해 해당 디렉토리에 명령어를 통해 설치하기 $ npm install hexo-cli -g 만약 설치를 하지 못한다는 에러 메세지가 출력 된다면 앞에 “sudo”를 붙여 보자. Hexo 초기 설정$ Hexo init (folder name) $ cd (folder name) $ npm install Blog 파일로 접속Hero new post “제목“Hero generateHero serverHero deploy 원하는 폴더에서 Hexo init [blog]Npm installHexo new post “#”","link":"/2019/04/03/TIL-190403-git-blog-시작하기/"},{"title":"TIL-190404","text":"3일차(0404) - HTML/CSSHTML/CSS - What I learn… CSSs CSS 레이아웃 선택자 레벨(점수) Table Position 브라우저 접두사 nav 한 페이지에 2~3개 정도가 적당 메인메뉴임을 알 수 있도록 으로 제목 넣어줄 것(section, article 동일) gradient background 속성 중 하나 linear-gradient() text-shadow white-space nowrap background-position animation - @keyframe","link":"/2019/04/04/TIL-190404/"},{"title":"TIL-190405","text":"4일차(0405) - HTML/CSSHTML/CSS - What I learn… # form fields legend label (input 요소에 for 속성으로 연결) a tag(title, target, a 태그의 중요성) text-indent letter-spacing clearfix(모듈) .clearfix::after {content: “”; display: block; clear: both;}","link":"/2019/04/05/TIL-190405/"},{"title":"TIL-190406-CSS-reset","text":"css reset study html basic css a “*“ ::befer / ::after-","link":"/2019/04/06/TIL-190406-CSS-reset/"},{"title":"TIL-190408","text":"5일차(0408) - HTML/CSSHTML/CSS - What I learn… # dl, dt, dd display: flex 크로스브라우징의 중요성 HTML5 Shiv - WEBDIR :: HTML5 Shiv - HTML5 요소 크로스브라우징","link":"/2019/04/08/TIL-190408/"},{"title":"TIL-190409","text":"6일차(0409) - HTML/CSSHTML/CSS - What I learn… # 날짜 정의 datetime 속성 - 필수 속성, 컴퓨터가 날짜를 확인 text-overflow overflow: hidden, white-space: nowrap 함께 써야 함 defer 속성 removeClass addClass e.keycode https://keycode.info/","link":"/2019/04/09/TIL-190409/"},{"title":"TIL-190410-html markup 설계하기 ","text":"HTML - basicHTML이란?Hyperlink text Markup Language 약자로 웹 페이지를 구성하는 틀에 역활을 한다. 웹 디자인 인지 사항HTML는 단지 외관적으로 뿐만 아니라 내부적으로 관리가 용이하고, 간결한 CSS 설계를 위해 많은 신경을 써야 한다. 또한 많은 스타트업은 빠른 성장을 위해 웹 페이지 디자인에 접근성을 놓치는 일이 많다. 그러나 요즘 대기업, 혹은 해외 기업과 스타트업들은 장애인에 접근성을 높이기 위해 노력하는 일이 늘어나고 있다. 웹 표준 (Web Standard)W3C (World Wide Consortium)에서 정의하는 기술 표준을 말한다. 사용성과 접근성에 더 높은 초점을 가지고 웹 계발과 다양한 환경에 사용자의 이용을 보장한다. 웹 접근성 (Web Accessibility)모든 환경에 사용자에게 같은 서비스 제공하며 이용에 차별이 없도록 보장하는 것. 주로 시각, 마우스를 사용하지 못하는 장애인을 위해 제공 되며, 오디오로 웹에 전반적은 정보를 오디오로 제공한다 Head Part언어 인코딩&lt;meta charset=&quot;utf-8&quot;&gt; 태그 위에 선언해야 적용이 된다. charset (인코딩 설정) 해당문서가 어떤 언어로 인코딩 되었는지 알려준다. utf-8은 HTML5 방식으로 표기하는 방법이다. 통상 설정을 하지 않아도 작동이 되지만, 미 설정시 언어 글자가 깨져서 나오는 경우가 많다. html 언어 설정&lt;html lang=&quot;ko-KR&quot;&gt; &lt;/html&gt; 웹 접근성을 지침으로 안에 페이지의 기본 언어를 선언한다. Screen Reader 프로그램이 언어를 인식하여 자동으로 음성을 변환하거나 해당 언어에 적합한 발음을 제공한다. 시각장애인을 위한 보조 속성으로 command + f5를 누르면 실행된다. Ko을 사용하는 경우 영어를 기본적으로 제공 하지만, En은 한글 자동 변환을 지원하지 않는다. [selector] id스타일을 지정할 때 한 가지만 지정해서 사용한다. ( # selector)하나의 문서에 고유한 id 하나밖에 쓸 수 없다. class룹으로 묶어서 스타일을 지정할 때 사용한다. ( . selector) = id / class는 숫자로 시작해서는 안된다. [Multi selector] 자식 selector: [ &gt; ]~안에의 의미로 &gt; 만 사용이 가능하며 왼쪽이 부모 혹은 더 큰 selector을 넣는다.Ex) div &gt; p (div 안에 P만 선택) 후손 tag: [ space ]~안에 있는 A 모두를 선택 할 때 사용한다.Ex) div p (div 안에 P모두 선택) 그룹selector: , 다수에 selector에 공통된 스타일을 주고 싶을 경우 사용한다.Ex) div, p, a (div, p, a 모두) 특정 id 값: [ selector.id ]~안에 A 특정 태그 선택.Ex) p.foo (p태그 안에 id=”foo”을 가진 요소 선택) [Web page 설계 방식]3단 구조: header, body(content), footer4단 구조: header, navigation ,body(content), footer 1.선형화 단계화면 구성 나누기 2.시멘틱 요소그룹화 하기 3.Naming파스칼 첫 대문자카멜 첫 소문자 두번째 대문자 a. aside = 부가 정보b. article = 독립적인 , section = 콘텐츠 블록 Markup","link":"/2019/04/10/TIL-190410-html-markup-설계하기/"},{"title":"TIL-190411","text":"7일차(0411) - HTML/CSSHTML/CSS - What I learn… # article figure img alt , transition","link":"/2019/04/11/TIL-190411/"},{"title":"TIL-190415","text":"9일차(0415) - HTML/CSSHTML/CSS - What I learn… # &lt;a href=&quot;mailto:code.ameba@gmail.com&quot;&gt;code.ameba@gmail.com&lt;/a&gt; 클릭 시 메일 작성 창 열림 `&lt;a href=“tel:01026840242”&gt;Tel-&gt; 모바일 환경에서 전화걸기 링크 &lt;header&gt;와 &lt;footer&gt;는 어디에나 들어갈 수 있다.(메인, 아티클, 섹션 등등) 푸터는 제목이 필요 없다 푸터의 주소에는 &lt;address&gt; 태그 사용 &lt;small&gt;: 주변 글자보다 작게 &lt;big&gt;: 주변 글자보다 크게 &amp;copy; 저작권 표시 반응형 웹 마크업이 심플해야 함 RWD(반응형) vs AWD(적응형) Flexible web design 다양한 패턴이 존재 desk top first vs mobile first 디바이스의 성능저하 고려해야 함 px 단위는 지양, %, vh 등의 비율 단위 지향 media queries @ : 앳사인 프린트용 CSS 별도 제작 및 연결 가능 모바일 세로 모드: 포트레이트 / 가로 모드: 랜드스케이프 sass(css 전처리기) 최근에는 scss를 더 많이 쓰는 편 img {max-width: 100%;height: auto;}` 모바일 환경에 맞는 아트디렉션 필요(단순히 사이즈를 줄이는 게 아닌 적절한 크롭) &lt;img src=&quot;#&quot; srcset=&quot;&quot;&gt; , &lt;picture&gt;, &lt;source&gt; 디바이스에 따른 조정 가능 @media screen device-pixel-ratio html shiv break point : 반응형에서 너비가 바뀌는 지점? padding 백분율은 가로 사이즈 기준.","link":"/2019/04/15/TIL-190415/"},{"title":"TIL-190412","text":"8일차(0412) - HTML/CSSHTML/CSS - What I learn… # ol q footer - article 내부에도 사용 가능 :hover 특징 counter() - counter(name, style) - name: 카운터 이름 - style: 기본값(생략)은 십진수(decimal), list-style-type과 동일한 값 * disc, circle, square, decimal, decimal-leading-zero, lower-roman, upper-roman, lower-greek, lower-latin, upper-latin, armenian, georgian, lower-alpha, upper-alpha, or none.","link":"/2019/04/12/TIL-190412/"},{"title":"TIL-190416","text":"10일차(0416) - HTML/CSSHTML/CSS - What I learn… # picture, srcset 등으로 기기별 적절한 이미지 사이즈 적용 가능 반응형 배경이미지 https://webdir.tistory.com/81https://keycode.info/","link":"/2019/04/16/TIL-190416/"},{"title":"TIL-190417","text":"1일차 (0417) - 컴퓨터 공학Python - What I learn… # 파이선 언어란? 자료구조 / 알고리즘 Recursion 재귀Binary searchIndexSortStackHeap (segmentation) call by value call by reference 자바 스크립트는Single threaded =&gt; single call stackNon-blockingAsynchronousConcurrentCall stack / printSquare Function foo/ bar/ bez Blocking = 느리게 동작하는 코드 SetTimeout 32bit vs 64bit0, 1 = bit 차이점 와이어 갯수 메모리 주소값 정수 (integer)의 표현 일반적으로 1 바이트, 2바이트, 4바이트, 8바이트에 저장 부호 있는 정수(signed)와 부호 없는 정수(unsigned)로 나뉜다. 부호가 있는 경우 첫 bit가 부호를 나타냄(0: 양수, 1:음수)","link":"/2019/04/17/TIL-190417/"},{"title":"TIL-190418","text":"2일차 (0418) - 컴퓨터 공학Python - What I learn… # 프로그래머는 함수를 통해서 추상적인 함수 (function routine procedural, sub-routine)Procedural -programming = 절차 지향 객체(object) =&gt; OOP (object oriented programming) 객체지향 함수 (function)=&gt; function signature or interface함수 이름, 매개변수, 결과값(반환) =&gt; 내부 구현 (implantation) Function name = 함수가 어떤 일을 하는지 명확하게 나타낸다. 매개 변수, returna. 기능 명세 = 어떤 구조, 어떤 기술, 방식으로 설계할지 설계 (인터페이스 설계) Mantissa 52bit 는 정밀도를 말한다. 52 bit가 넘으면 에러로 정수로 떨어지지 않는다. Command =&gt; sys.float_info.mant_dig5353이 나오는 이유는 1.000000…앞에 1이 무조건 적으로 등장하기 때문에 1일 생략하여 mantissa에 52bit 에서 1bit를 초과하여 보여준다.","link":"/2019/04/18/TIL-190418/"},{"title":"TIL-190419","text":"3일차 (0419) - 컴퓨터 공학Python - What I learn… # Jupyter Jupyter notebookNew =&gt; python3 A=10A=이름 객체 (변수) variable10=값 객체 파이선에는 box 모델이 적용 되지 않음 모든 것이 객체 언어 추상화어셈블리어 = 하드웨어 의존적 = low levelC/ C++ = 메모리를 직접 할당, 해제 = unmanaged languageJava/ C# = 언어 자체가 메모리를 할당 해제 =&gt; 가비지 컬랙션Python/ javascript = 자료형에 자유로워짐 = high level language =&gt; 생산성이 좋다 부동 소수점 (floating point)고정 소수점 (fixed point) mutable object(변수 가능객체) 리스트 딕셔너리 집합immutable object(변경불가능객체) 정수, 상수 문자열 튜플","link":"/2019/04/19/TIL-190419/"},{"title":"TIL-190422","text":"4일차 (0422) - 컴퓨터 공학Python - What I learn… Call by object reference Call by reference Call by value 함수란? 어떤 입력에 대한 작업의 결과를 출력해 주는 것 함수를 사용하는 이유 반복되는 내용을 효율적으로 처리하기 위함 코드를 효율적으로 만들고 추가적으로 가독성도 올라가기 때문에 Name space소속을 나타내는 역할을 합니다. 즉 변수 이름이나 함수 이름과 같이 명칭을 사용하는 공간에 의미로 변수가 저장되어 있는 공간. [namespace]::[변수 혹은 함수] 그러나 네임스페이스는 소속 공간에 따라서 변수나 함수가 같은 이름임에도 다른 식으로 구분이 될 수 있다.ㄴ Stack frame이름 객체에 쌓이는 func frame메모리 공간 함수를 실행할 때 인자(parameter)를 어떻게 전달할 것인가?Call by value // stack frame이 분리되어져 있어 바깥으로 값을 뺄 수 없다Call by reference // stack frame 바깥으로 주소 값을 접근 및 수정이 가능하다. Immutable object =&gt; 함수 내부에서 값을 변경할 수 없다.Mutable object =&gt; 새로운 객체를 할당하는 것이 아니라면 함수 내부에서 값을 변경할 수 있다 Call by object reference함수 내부에서 튜플 값을 바꿔야 한다면tu = (1,2,3)def change_tu(tu, e1, e2, e3):tu=(e1,e2,e3)print(tu, ‘in change_tu’)return tu tu=change_tu(tu,4,5,6)print(tu) Nonlocalfirst function class 1. 함수를 인자(argument)로 전달def f(func, a, b): return func(a,b) def g(a,b): return a+b a=10 b=20f(g,a,b)output =30 2. 함수를 리턴(return) 값으로 전달def calc(kind): if kind==&quot;add&quot;: def add(a,b): return a+b return add elif kind==&quot;sub&quot;: def sub(a,b): return a-b return sub adder=calc(‘add’)adder (10,20)output = 30 3. 함수를 변수에 전달함수를 다른 함수의 전달 인자 로 사용하고, 함수에서 함수를 리턴 하거나 변수의 값으로 함수를 할당 가능 익명 함수(lambda)def func(a,b)return a+bf=lambda a, b: a+b //람다는 반드시 리턴한다. Javascript lambda =Function( ){} 함수 =&gt; lazy evaluation = 내가 필요할 때Map (func, iterable) // 사상 맵핑을 한다Filter (Reduce 리스트에 모든 값을 더한다. (reduce(lambda a, b: a+b, li)) List comprehension 삼항연산자A=10If a &gt; 7:String=“big”ElseString=”smaill” String “big” If a &gt; 7 else “smaill” // 참일 때 값 if 조건문 else 거짓일때 값 Dic.get[“e”] // 값이 없으면 noneDic [“e”] // 값이 없으면 에러Dic.update Closure함수 내부에 상태 정보를 저장해 두고 함수 결과가 이 내부의 상태 정보에 따라 출력 값이 달라진다.OOP를 쓸 수 없을떄 로컬 변수 함수가 실행 도중에 데이터를 저장하기 위해서 상태 정보: 특정한 데이터의 현제 상태문법: 계좌 클로져 함수:Def account(cus_name, balance):Def inner (money):Balance += moneyReturn cus_name, balanceReturn innerMy_acnt=account(‘greg. 5000)Your_acnt = account (“john”, 300) Linear search (선형 탐색)N -&gt; t(n) = n Binary search타겟을 찾았다면 인덱스 반환/ 찾지 못하면 noneN -&gt; t(n)= log^2n","link":"/2019/04/22/TIL-190422/"},{"title":"TIL-190424","text":"6일차 (0424) - 컴퓨터 공학Python - What I learn… OOP Network Hanoi tower Sorting Quick sort OOP객체지향프로그래밍 OOP(Object Oriented Programming) 캡슐화 (encapsulation)하나의 객체가 특정한 목적을 가지고 필요한 변수나 메소드를 하나로 묶는 것을 의미한다.주된 목적으로 정보을 은닉화(information hiding) 하기 때문에 함수를 관련성 있게 클래스에 구성해야한다. 추상화 (Abstraction)공통된 속성이나 기능을 묶어 이름을 붙이는 것으로 객체 지향적 관점에서 클래스를 정의한는 행동이 추상적이라고 할 수 있다. 다형성 (Polymorphism)부모 클래스에서 물려받은 가상의 함수를 자식 클래스 안에서 메서드가 오버라이딩(method overriding)+함수 오버로딩 (function overloading) 되어 사용되는 것을 말한다. 상속된 객체를 확장, 변경을 간능하게 해주며, 이를 통해 코드를 재사용 및 코드 간결화 되어 코드 관리가 편하다. 상속성 (Inheritance)상위 특징을 하위가 물려받는 것으로 상위 클래스에 근거하여 새롭게 클래스 행위를 정의 할 수 있게 도와준다. 즉 상위 클래스에 기능을 재사용할 수 있지만 새로운 기능을 추가할 수 있다. 디자이 패턴 (solid) S – single responsibility principle (단일 책임) O – open-closed principle (확장 폐쇠) L – liskov substitution principle (리스트프 치환) I – interface segregation principle (인터페이스 분리) D – Depending intorsion principle (의존 역전) Hanoi gamedef hanoi(n, _from, _by, _to):Base Caseㄴif n==1:print(f’{n}번쨰 쟁반을 {_from}에서 {_to}로 이동’)return hanoi(n-1, _from, _to, _by)print(f’{n}번쨰 쟁반을 {_from}에서 {_to}로 이동’)hanoi(n-1, _by, _from, _to) = hanoi(n, “A”, “B”, “C”) 버블 정렬데이터 갯 수If 4 = 3+2+1If 6 = 5+4+3+2+1  For,while 문을 사용하지 않고 1~n에 수를 모두 더하기[재귀함수 방식]def sumation(n):if n==1:return 1return sumation(n-1)+n [등차 수열 방식]def sumation(n):return n*(1+n)//2 절차지향 함수= 함수 시그니처 // 기능, 구현 객체지향 객체(object) /= (관련있는) +변수 상태정보(데이터) / 특성값 +함수 (메서드) 기능 ( input + 상태 정보(맴버) -&gt; output NetworkOSI 7 계층 응용 계층 (Application Layer) 표현 계층 (Presentation Layer) 세션 계층 (Session Layer) 전송 계층 (Transport Layer) 네트워크 계층 (Network Layer) 데이터 링크 계층 (Data link Layer) 물리 계층 (Physical Layer) LAN : local area Network WAN: Wide area Network Packet(패킷) = 보내는 사람, 받는 사람 Arp =Ip =&gt; mac Arp 스쿱핑 = 맥어드래스를 가로채어 정보를 빼오는 방식 Ip protocol Subnet mask: ICT: internet service providerHost ID에 할당된 비트를 잘라서 서브넷으로 Public IP : 세계적으로 Unique하다 Private IP DHCP : dynamic host configuration protocol Sorting단순 알고리즘Bubble sortInsertion sortSelection sort분할 알고리즘Quick sortMerge sortHeap sort 분할 정복 기법 (divide &amp; conquer)어려운 문제를 잘게 나누어서 하나씩 해결작은 Solution이 모여서 전체(큰)문제를 해결 Quick sortdef quick_sort(li, start, end): #base case #todoif start &gt;= end:return left = startright = endpivot = li [(left+right)//2] #left와 right가 교차하기 전까지while left &lt;= right: #list[left]가 피벗 보다 크면while li[left] &lt; pivot:left+=1 #list[right]가 피벗 보다 작으면while li[right] &gt; pivot:right-=1 if left &lt;= right:li[left], li[right]=li[right], li[left]left+=1right-=1 quick_sort(li, start, right)quick_sort(li, left, end) test codeimport randomwhile True:numdata=int(input(‘데이터 개수(종료:0):’))if not num_data:breakdata=[random.randint(1, 100) for in range(num_data)]print(data)quick_sort(data, 0, len(data)-1)print(data)","link":"/2019/04/24/TIL-190424/"},{"title":"TIL-190425","text":"7일차 (0425) - 컴퓨터 공학Python - What I learn… Network TCP/IP 알고리즘 NetworkWAN PortWide Area Network - Local Network들을 통신하게 해주는 네트워크로 자신을 포함하지 않는 큰 범위에 네트워크. LAN portLocal Area Network 지역 네트워크로 이더넷 프로토콜을 사용하며 자신을 포함한 작은 네트워크 단위를 구성하는 네크워크망. IPPublic IP (공인 IP 주소)Globally Unique IP Private IP (사설 IP 주소)Private Network 상에 존재하며 NAT를 통해 인터넷에 연결이 가능하다. 하지만 인테닛 상에서 Private IP address로 연결이 불가능하다. IP routing table라우터가 경로를 찾을 때 사용하는 것으로, 패킷을 전송할 때 인터페이스의 데이터 링크 프레임 안에 IP 패킷을 캡슐화된 네트워크에 대한 정보를 포함하고 있다. Applicationhttp =메세지 기반에 “문자열”https = SSL / TLS을 포함한 보안이 개선된 웹 통신 방식FTPSMTPDNS = domain name service사람이 읽기 쉽다DNS를 =&gt; IP로 바꾼다 Translate (전송) / port =&gt; 특정process에 저장 Internet / IP (ip routing) – ip address Network Interface / ethernet (mac address) Port (Translate section)socket에 부여된 주소 숫자로서 특정 프로세스로 데이터를 전달할 수 있다.(0~2^16-1 정수)Socket = listening socket / data socketClient 프로세스 TCP (Transmission Control Protocol) 연결 지향형 Protocol로서 신뢰도가 높다. 패킷이 유실 되면 일정 시간 후 데이터를 재전송 해준다. 네크워크에 부담을 준다. UDP (User Datagram Protocol) 비 연결 지향형 Protocol로서 신뢰도가 낮다. 패킷 전송후 데이터 일부가 손실 되어도 재전송을 하지 않는다. 통신 속도가 빠르다. HTTPURL =&gt; http:// user : password @ host : port/urlpath ?query # bookmark port = 기본적으로 80을 쓰므로 일반적으로 생략이 가능 HTML/1.0 = 일시적 연결 TCP 연결 후 하나의 요청/ 응답 후 연결을 끊는다. HTML/1.1 = 지속적인 연결 (persistent connection) TCP 연결을 그대로 유지한다. Connection: close 헤더를 포함해 일시적 연결을 끊는다. 효율적인 캐싱과 프록싱 컨텐트 협상 Error 메세지200번대: 성공 메세지 300번대400번대: Client 에러 500번대: server 에러 Comparison Sort 종류Quick sortRandom pivot 피벗이 1이나 왔을때 n^2이된다. 이를 막기 위해 피벗과 가장 왼쪽에 값을 교체한다 Big O -&gt; averageInsertion sort 삽입 정열 Selection sort 선택 정열 Merge sort연산 리스트배열과 연결 리스트스택, 큐Tree순회전위중위후위레벨순서","link":"/2019/04/25/TIL-190425/"},{"title":"HOW TO START GIT COOPERATIVE WORK.","text":"Repository 만들기 깃을 가입합니다. 오른쪽 상단에서 “Your Profile”을 클릭하면 자신의 계정에 프로필로 들어갑니다. 자신에 프로필 페이지에서 다양한 세팅을 할 수 있지만 프로젝트 진행을 위해 “Repositories”에 들어갑니다. Repositories”에서 초록색 UI “NEW”을 눌러 새로운 Repositories”을 생성해줍니다. 가장먼저 자신에 유저 아이디를 볼 수 있습니다.a. 옆에 Repositories”, 프로젝트 이름을 입력해줍니다.b. 초록색 체크 박스가 나타나면, 사용이 가능한 이름입니다.c. 가장 먼저, 프로젝트의 설명과 제작 방식 등을 기입 할 수 있는 “README.md” 파일을 만들기 위해 “Initialize this repository with a README”을 선택해줍니다.d. 추가로 “Description”에 프로젝트에 간단한 설명을 넣어 줍니다. 성공적으로 “Repositories”을 생성하고 프로젝트를 시작할 준비가 되었습니다. ‘Repositories”을 들어가면 “README” 파일이 생성된 것을 볼 수 있습니다.","link":"/2019/04/18/git-협업-프로젝트-시작하기/"},{"title":"TIL-190423","text":"5일차 (0423) - 컴퓨터 공학Python - What I learn… 이진 탐색. big O Process vs thread Recursion 재귀 [Binary search] 이진 탐색이진 검색은 정렬된 리스트에서 원하는 항목을 찾기에 효율적인 알고리즘 입니다. 리스트를 반으로 나누고 타겟 값이 나올 때까지 항목을 좁혀갑니다.선형 검색(linear search)는 모든 항목을 하나씩 검사해야 하는 문제가 있어 항목이 많다면 이진 탐색이 적절합니다. [이진 탐색 절차] Low = 0, high = n-1 로 초기화 Mid는 (low + high)을 2로 나눈 몫으로 결정합니다. Data[mid]와 target이 서로 같으면 탐색 종료 만약 target &lt; data[mid]이면 high = mid-1로 업데이트 한 후, 2회 돌아갑니다 [Segmentation]가상 메모리를 관리하는 기법으로 가상 메모리에 로드된 프로세스가 가상에 공간에 물리 메모리를 갖고 있는 것처럼 사용할 수 있다. 가상 메모리는 각 프로세스당 메인 메모리와 동일한 크기로 할당되며, 프로세스의 일부만 메모리에 로드하고 나머지를 보조 장치에 로드하는 형식으로 작동 된다. – Segmentation 기법이란메모리를 논리적 내용의 단위로 잘라 분할된 메모리를 할당하여 물리 주소로 부터 블록 단위로 변환하는 것을 말한다. – Paging 기법Segmentation과 가상 메모리를 고정된 크기로 나누어 메모리를 관리하는 기법이다. 즉 큰 용량에 작업을 작게 쪼개어 처리하는 방식으로 불연속적인 메모리 요청 등에 유연하게 처리할 수 있다. Segmentation 과 다르게 고정된 크기로 할당하는 방식으로 차이점을 보인다. – page frame페이지(고정된 크기의 블록)를 물리 메모리와 같은 크기로 나누어진 블록 단위. 물리 메모리를 사용하는 최소 크기 단위 – page fault가상 메모리 주소를 할당하는 방식으로 RAM의 부족한 용량을 보완하는데 사용한다. 가상 메모리를 사용하는 최소 크기 단위 구조 Code Data Heap Stack Cache메모리 계층 중 하나로 속도가 빠른 장치와 느린 창치간의 속도차에 따른 병목 현상을 줄이기 위한 범용 메모리. 데이터 지역성(locality)의 원리를 사용한다. – Cache hit적중율의 극대화로 Cache Access 시간 최소화 – Cache miss실패율에 따른 지연시간(Miss Penalty) 최소화 Big - o알고리즘에 효율성을 나타내는 지표로서 내가 개선한 알고리즘에 효율성, 연산 속도를 비교하기 위해 사용합니다. O(1) 상수 시간 (속도가 빠르다) / =&gt; arr [0] / linked-list insert, delete O(log n) 로그 시간 / =&gt; BST O(n) 선형 시간 / =&gt; linked-list search 배열 삽입, 삭제 O(n log n) 선형 로그 시간 / =&gt; quick sort, merge sorta. Comparism sorting (비교 정렬) O(n^2) 지수 시간 / 버블 sort, 선택 정렬, 삽입 정렬 Compiler vs interpreter Process =&gt;OSa. Job scheduling and scheduleri. Context switchingb. Process statusi. Tread =&gt; multithreading Concurrency programming (동시성 프로그래밍)a. Multi-threading =&gt; CPU (bound) 작업이 많을 떄 사용i. Race-conditionii. Dead-lockb. Asynchronous I/O (I/O bound) Multi-threading 메모리, 성능에 매우 우월함 Race condition Program(image) 하드 디스크에 저장되어 있는 “하나”의 이미지(code/data) Process 메인 메모리에 올라와서 실행을 시작한 프로그램 PID (process ID) 선정형 스케줄러 : preemptive scheduling (Preemption) =&gt; multi-tasking 가능 비선정형 스케줄러: non- preemptive scheduling Process status (infographic) 알고리즘 구성 • Priority algorithm• Round-robin algorithmo 정해진 시간 동안 실행 Time slice QuantumI/O 작업 =&gt; 네트워크속도가 느리지만 CPU가 필요 없다 Thread =&gt;Context-switching =&gt;CPU에 저장 되어있는 레지스터 값을 PCB 레지스터에서 교체 되는 행위 = 라운드 로빈에서 타임 슬라이스가 지날 때마다 일어난다Instruction Register (IR)현재 실행되고 있는Program counter (PC) PCB Process vs thread실행 흐름 – Instruction인스트럭션(기계어)에 나열 VAS = visual address space 가상 주소 공간 GIL = global interpreter lock Parallel programming /하드웨어가 다수 필요함 Concurrency programming한개의 하드웨어로 Single core multithreading Multi core multithreading Multithreading =&gt; 공유 자원이 필요하다Race condition이 발생함: 한정된 자원을 여러 개의 프로세스다 동시에 이용이 될 때 프로세스가 자원 이용을 위해 경쟁을 벌이는 현상 Critical Section임계영역어떤 스레드에서 공유 자원에 접근한 후수정, 변경 하려는 코드$ lock=threading.Lock() $ lock.release()Recursion 재귀 함수 호출 도중에 자기 자신을 다시 호출하는 것 Base case (기저 조건)재귀 호출에 빠지거나, 재귀 호출을 일으키지 않는 함수의 기본 케이스 이다. Terminal case (종료 조건, 탈출 조건)\\$ def func(n):// Print (n) =&gt; I/O작업 #base caseIf n &lt;= 0;ReturnFunc(n-1) 재귀함수 만드는법 패턴을 찾는다  점화식을 만든다 기저 조건을 만든다 Factorial (계승)3! = 321 3!= 32! 2!=21! 5! = 5*4*3*2*1 점화식 Fac(n) = fac(n-1)*n 기저 조건 n==1 or n==0 return 1 test) def factorial (n):if n==0 or n==1:return 1return factorial (n-1) *nfor i in range (1,6):print (factorial(i))fibonacci series피보나치점화식fibo(n) = fibo(n-2) + fibo (n-1)기저 조건if n==1 then 0If n==2 then 1 Def fibo(n): If n==1: Return 0 elIf n==2: Return 1 Return fibo(n-2) + fibo(n-1) For i in range (1, 11): Print (fibo(i), end=’ ’)","link":"/2019/04/23/TIL-190423/"}],"tags":[{"name":"html, web","slug":"html-web","link":"/tags/html-web/"}],"categories":[{"name":"Algorithm Study","slug":"Algorithm-Study","link":"/categories/Algorithm-Study/"},{"name":"TIL","slug":"TIL","link":"/categories/TIL/"},{"name":"Project","slug":"Project","link":"/categories/Project/"},{"name":"drunk_code 협업 Project","slug":"Project/drunk-code-협업-Project","link":"/categories/Project/drunk-code-협업-Project/"}]}